{"version":3,"sources":["views/Predictions/components/History/BetResult.tsx","views/Predictions/hooks/usePollRoundData.ts","views/Predictions/components/Container.tsx","views/Predictions/components/CollectWinningsPopup.tsx","views/Predictions/context/SwiperProvider.tsx","views/Predictions/components/TradingView.tsx","views/Predictions/components/Notification/Notification.tsx","views/Predictions/components/Notification/ErrorNotification.tsx","views/Predictions/components/Notification/PauseNotification.tsx","views/Predictions/helpers.ts","views/Predictions/components/CollectRoundWinningsModal.tsx","views/Predictions/components/CollectWinningsButton.tsx","views/Predictions/components/ReclaimPositionButton.tsx","views/Predictions/components/PositionTag.tsx","views/Predictions/components/RoundResult/styles.tsx","views/Predictions/components/RoundResult/RoundResult.tsx","views/Predictions/hooks/useIsRefundable.ts","hooks/ticker.ts","views/Predictions/components/History/BetDetails.tsx","views/Predictions/components/History/HistoricalBet.tsx","views/Predictions/components/History/Header.tsx","views/Predictions/History.tsx","views/Predictions/RoundMultiplierArrows.tsx","views/Predictions/components/RoundCard/EnteredTag.tsx","views/Predictions/components/RoundCard/MultiplierArrow.tsx","views/Predictions/components/RoundCard/Card.tsx","views/Predictions/components/RoundCard/CardHeader.tsx","views/Predictions/components/RoundCard/CollectWinningsOverlay.tsx","views/Predictions/components/RoundCard/CanceledRoundCard.tsx","views/Predictions/components/RoundCard/ExpiredRoundCard.tsx","components/BlockProgress.tsx","views/Predictions/components/RoundCard/LiveRoundCard.tsx","views/Predictions/components/CardFlip.tsx","views/Predictions/hooks/useSwiper.ts","views/Predictions/components/FlexRow.tsx","views/Predictions/components/RoundCard/SetPositionCard.tsx","views/Predictions/components/RoundCard/OpenRoundCard.tsx","hooks/useGetBlockCountdown.ts","views/Predictions/hooks/useRoundCountdown.ts","views/Predictions/components/RoundCard/SoonRoundCard.tsx","views/Predictions/components/RoundCard/index.tsx","views/Predictions/components/Label.tsx","views/Predictions/components/PrevNextNav.tsx","views/Predictions/components/HistoryButton.tsx","views/Predictions/components/Menu.tsx","views/Predictions/hooks/useOnNextRound.ts","views/Predictions/Positions.tsx","views/Predictions/Mobile.tsx","views/Predictions/Desktop.tsx","views/Predictions/components/MobileMenu.tsx","views/Predictions/Chart.tsx","views/Predictions/components/RiskDisclaimer.tsx","views/Predictions/index.tsx","hooks/useTokenBalance.ts","hooks/useLastUpdated.ts","hooks/usePreviousValue.ts","utils/getTimePeriods.ts"],"names":["Result","usePollRoundData","dispatch","useAppDispatch","account","useWeb3React","useEffect","timer","setInterval","a","getMarketData","marketData","updateMarketData","POLL_TIME_IN_SECONDS","clearInterval","Container","styled","div","theme","colors","gradients","violetAlt","bounceInKeyframe","keyframes","bounceOutKeyframe","bounceInAnimation","css","bounceOutAnimation","Wrapper","mediaQueries","md","Popup","secondary","CollectWinningsPopup","useState","isOpen","setIsOpen","TranslateString","useI18n","ref","useRef","predictionStatus","useGetPredictionsStatus","isHistoryPaneOpen","useIsHistoryPaneOpen","current","getBetHistory","user","toLowerCase","claimed","bets","winnerBets","filter","bet","position","round","length","CSSTransition","in","unmountOnExit","nodeRef","timeout","classNames","width","style","flex","mr","onClick","setHistoryPaneState","variant","color","SwiperContext","createContext","undefined","SwiperProvider","children","swiper","setSwiper","Provider","value","destroySwiper","destroy","tradingViewListener","Promise","resolve","Object","defineProperty","window","configurable","set","this","tv","initializeTradingView","TradingViewObj","widget","autosize","height","symbol","interval","timezone","isDark","locale","toolbar_bg","enable_publishing","allow_symbol_change","container_id","TradingView","useTheme","then","overflow","className","id","CardWrapper","BunnyDecoration","Notification","title","src","alt","mb","ErrorNotification","as","PauseNotification","getBnbAmount","bnbBn","getBalanceAmount","formatUsd","usd","formatNumber","formatBnb","bnb","toLocaleString","minimumFractionDigits","maximumFractionDigits","padTime","num","toString","padStart","formatRoundTime","secondsBetweenBlocks","getTimePeriods","hours","minutes","seconds","minutesSeconds","getMultiplier","total","amount","getPayout","bullAmount","bearAmount","totalAmount","multiplier","BetPosition","BULL","getBubbleGumBackground","Modal","ModalContainer","CollectRoundWinningsModal","payout","epoch","onDismiss","onSuccess","isPendingTx","setIsPendingTx","useToast","toastSuccess","toastError","predictionsContract","usePredictionsContract","bnbBusdPrice","usePriceBnbBusd","minWidth","mt","p","mx","alignItems","justifyContent","textAlign","fontSize","times","toNumber","methods","claim","send","from","once","result","transactionHash","href","error","message","console","isLoading","endIcon","spin","CollectWinningsButton","hasClaimed","props","useModal","onPresentCollectWinningsModal","disabled","ReclaimPositionButton","StyledTag","Flex","bg","Tag","startIcon","icon","borderRadius","py","px","cursor","textTransform","ml","PositionTag","betPosition","isUpPosition","getPrizePoolAmount","PrizePoolRow","bold","LockPriceRow","lockPrice","Background","Box","isNext","isLive","hasEntered","success","BEAR","failure","borderColor","StyledRoundResultBox","card","background","RoundResultBox","RoundResult","closePrice","isPositionUp","priceDifference","failed","useIsRefundable","isRefundable","setIsRefundable","claimable","call","refundable","fetchRefundableStatus","TokenPair","StyledBetResult","textDisabled","BetResult","WIN","getHeaderColor","LOSE","CANCELED","handleSuccess","fetchBet","getHeaderText","getHeaderIcon","getResultColor","StyledBetDetails","dropdown","BetDetails","LIVE","lockBlock","external","endBlock","StyledBet","attrs","YourResult","HistoricalBet","currentEpoch","useGetCurrentEpoch","status","roundResultPosition","getRoundResult","markBetAsCollected","betId","roundResult","resultTextColor","getRoundColor","resultTextPrefix","isOpenRound","isLiveRound","PredictionStatus","lineHeight","scale","Filter","label","StyledHeader","getClaimParam","historyFilter","HistoryFilter","COLLECTED","UNCOLLECTED","ALL","Header","useGetHistoryFilter","isFetchingHistory","useGetIsFetchingHistory","handleChange","newFilter","fetchHistory","setHistoryFilter","size","checked","onChange","StyledHistory","BetWrapper","SpinnerWrapper","History","useGetHistoryByAccount","results","orderBy","map","RoundMultiplierDownArrow","isActive","fill","viewBox","d","x","y","filterUnits","colorInterpolationFilters","floodOpacity","mode","in2","type","values","stdDeviation","operator","k2","k3","RoundMultiplierUpArrow","StyledEnteredTag","EnteredTag","useTooltip","whiteSpace","targetRef","tooltipVisible","tooltip","ArrowWrapper","Content","EnteredTagWrapper","getTextColor","fallback","isDisabled","MultiplierArrow","upColor","downColor","textColor","multiplierText","getEnteredTag","bottom","right","top","left","Card","UIKitCard","getTextColorByStatus","StyledCardHeader","getBackgroundColor","Round","CardHeader","isBottom","CollectWinningsOverlay","roundId","state","setState","firstBetResponse","transformBetResponse","CanceledRoundCard","useGetTotalIntervalBlocks","estimatedEndBlock","startBlock","blockNumber","flexDirection","my","StyledExpiredRoundCard","ExpiredRoundCard","betAmount","hasEnteredUp","hasEnteredDown","bullMultiplier","bearMultiplier","useTokenPairTicker","tokenPair","connectOnMount","isConnected","stream","setStream","websocket","connect","useCallback","navigator","onLine","ws","WebSocket","onopen","onclose","onerror","Error","onmessage","evt","data","JSON","parse","eventType","e","eventTime","E","s","priceChange","parseFloat","priceChangePercent","P","weightAveragePrice","w","firstTrade","lastPrice","c","lastQuantity","Number","Q","bestBidPrice","b","bestBidQuantity","B","bestAskPrice","bestAskQuantity","A","openPrice","o","highPrice","h","lowPrice","l","totalTradedBaseAssetVolume","v","totalTradedQuoteAssetVolume","q","statisticsOpenTime","O","statisticsCloseTime","C","firstTradeId","F","lastTradeId","L","totalNumberOfTrades","n","disconnect","close","useBnbUsdtTicker","BNBUSDT","BlockProgress","rawProgress","useBlock","currentBlock","progress","primaryStep","GradientBorder","GradientCard","LiveRoundCard","totalInterval","useGetIntervalBlocks","bufferBlocks","useGetBufferBlocks","isBull","priceColor","tooltipContent","minHeight","Front","Back","Inner","isFlipped","StyledCardFlip","CardFlip","getComponents","front","back","useSwiper","swiperContext","useContext","FlexRow","dust","BigNumber","DEFAULT_TOKEN_DECIMAL","percentShortcuts","SetPositionCard","percentage","togglePosition","onBack","setValue","isTxPending","setIsTxPending","errorMessage","setErrorMessage","bnbBalance","useGetBnbBalance","balance","minBetAmount","useGetMinBetAmount","balanceDisplay","maxBalance","minus","valueAsBn","percentageOfMaxBalance","percentageDisplay","isNaN","showFieldWarning","gt","minBetAmountBalance","eq","lt","getButtonProps","bnValue","lte","token","onMouseOver","keyboard","disable","mousewheel","detachEvents","onMouseOut","enable","attachEvents","newValue","target","isWarning","inputProps","name","min","max","onValueChanged","step","valueLabel","percent","betMethod","decimalValue","getDecimalAmount","errorMsg","UnlockButton","OpenRoundCard","canEnterPosition","isSettingPosition","handleBack","prevState","handleSetPosition","newPosition","hash","positionDisplay","markPositionAsEntered","partialBet","useBlockCountdown","secondsRemaining","setSecondsRemaining","web3","getWeb3NoAccount","eth","getBlockNumber","BSC_BLOCK_TIME","prevSecondsRemaining","startCountdown","useRoundCountdown","intervalsToAdd","currentRoundBlockNum","useGetCurrentRoundBlockNumber","blocksToAdd","SoonRoundCard","countdown","RoundCard","useGetBetByRoundId","fetchRoundBet","Token","lg","Title","Text","Price","Interval","Label","dir","PricePairLabel","pl","display","TimerLabel","pr","StyledPrevNextNav","Icon","PrevNextNav","rounds","useGetSortedRounds","slidePrev","currentEpochIndex","findIndex","slideTo","update","slideNext","HistoryButton","SetCol","HelpButtonWrapper","TimerLabelWrapper","HistoryButtonWrapper","Menu","rel","useOnNextRound","previousEpoch","usePreviousValue","SwiperCore","use","Keyboard","Mousewheel","PageView","StyledSwiper","Positions","initialIndex","Math","floor","overflowX","overflowY","initialSlide","onSwiper","spaceBetween","slidesPerView","freeMode","freeModeSticky","centeredSlides","resizeObserver","PositionsPane","HistoryPane","ChartPane","isChartPaneOpen","ExpandChartButton","Button","text","ContentWrapper","StyledDesktop","Desktop","useIsChartPaneOpen","ERROR","PAUSED","setChartPaneState","ButtonNav","TabNav","StyledMobileMenu","MobileMenu","isHistoryOpen","isChartOpen","activeIndex","getActiveIndex","onItemClick","index","MenuWrapper","ChartWrapper","Chart","StyledMobile","View","isVisible","Mobile","view","HISTORY","CHART","POSITIONS","getView","GradientModalHeader","ModalHeader","bubblegum","RiskDisclaimer","acknowledgeRisk","setAcknowledgeRisk","acknowledgeBeta","setAcknowledgeBeta","maxWidth","maxHeight","htmlFor","marginBottom","Predictions","useMatchBreakpoints","isLg","isXl","usePersistState","hasAcceptedRisk","setHasAcceptedRisk","initialBlock","useInitialBlock","isDesktop","onPresentRiskDisclaimer","onPresentRiskDisclaimerRef","all","getStaticPredictionsData","staticPredictionsData","intervalBlocks","latestRound","find","market","paused","setPredictionStatus","currentRoundStartBlock","futureRounds","halfInterval","i","push","makeFutureRoundResponse","roundData","makeRoundData","transformRoundResponse","initialize","currentRoundStartBlockNumber","history","fetchInitialData","INITIAL","PageLoader","useTotalSupply","slowRefresh","useRefresh","totalSupply","setTotalSupply","cakeContract","getCakeContract","supply","fetchTotalSupply","useBurnedBalance","tokenAddress","BIG_ZERO","setBalance","useWeb3","contract","getBep20Contract","balanceOf","res","fetchBalance","useLastUpdated","lastUpdated","setLastUpdated","getBalance","walletBalance","refresh","useTokenBalance","fastRefresh","Date","now","setStateLastUpdated","previousLastUpdated","HOUR_IN_SECONDS","DAY_IN_SECONDS","MONTH_IN_SECONDS","YEAR_IN_SECONDS","delta","abs","timeLeft","years","months","days"],"mappings":"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","file":"static/js/11.42ace656.chunk.js","sourcesContent":["import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Box, Flex, Heading, Text, PrizeIcon, BlockIcon } from '@pancakeswap-libs/uikit'\nimport { useAppDispatch } from 'state'\nimport useI18n from 'hooks/useI18n'\nimport { usePriceBnbBusd } from 'state/hooks'\nimport styled from 'styled-components'\nimport { Bet, BetPosition } from 'state/types'\nimport { fetchBet } from 'state/predictions'\nimport useIsRefundable from '../../hooks/useIsRefundable'\nimport { formatBnb, getPayout } from '../../helpers'\nimport CollectWinningsButton from '../CollectWinningsButton'\nimport PositionTag from '../PositionTag'\nimport ReclaimPositionButton from '../ReclaimPositionButton'\n\nexport enum Result {\n  WIN = 'win',\n  LOSE = 'lose',\n  CANCELED = 'canceled',\n  LIVE = 'live',\n}\n\ninterface BetResultProps {\n  bet: Bet\n  result: Result\n}\n\nconst StyledBetResult = styled(Box)`\n  border: 2px solid ${({ theme }) => theme.colors.textDisabled};\n  border-radius: 16px;\n  margin-bottom: 24px;\n  padding: 16px;\n`\n\nconst BetResult: React.FC<BetResultProps> = ({ bet, result }) => {\n  const TranslateString = useI18n()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const { isRefundable } = useIsRefundable(bet.round.epoch)\n  const bnbBusdPrice = usePriceBnbBusd()\n\n  // Winners get the payout, otherwise the claim what they put it if it was canceled\n  const payout = result === Result.WIN ? getPayout(bet) : bet.amount\n\n  const getHeaderColor = () => {\n    switch (result) {\n      case Result.WIN:\n        return 'warning'\n      case Result.LOSE:\n        return 'textSubtle'\n      case Result.CANCELED:\n        return 'textDisabled'\n      default:\n        return 'text'\n    }\n  }\n\n  const getHeaderText = () => {\n    switch (result) {\n      case Result.WIN:\n        return TranslateString(999, 'Win')\n      case Result.LOSE:\n        return TranslateString(999, 'Lose')\n      case Result.CANCELED:\n        return TranslateString(999, 'Canceled')\n      default:\n        return ''\n    }\n  }\n\n  const getHeaderIcon = () => {\n    switch (result) {\n      case Result.WIN:\n        return <PrizeIcon color={getHeaderColor()} />\n      case Result.LOSE:\n      case Result.CANCELED:\n        return <BlockIcon color={getHeaderColor()} />\n      default:\n        return null\n    }\n  }\n\n  const getResultColor = () => {\n    switch (result) {\n      case Result.WIN:\n        return 'success'\n      case Result.LOSE:\n        return 'failure'\n      case Result.CANCELED:\n      default:\n        return 'text'\n    }\n  }\n\n  const handleSuccess = async () => {\n    await dispatch(fetchBet({ account, id: bet.id }))\n  }\n\n  return (\n    <>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n        <Heading>{TranslateString(999, 'Your History')}</Heading>\n        <Flex alignItems=\"center\">\n          <Heading as=\"h3\" color={getHeaderColor()} textTransform=\"uppercase\" bold mr=\"4px\">\n            {getHeaderText()}\n          </Heading>\n          {getHeaderIcon()}\n        </Flex>\n      </Flex>\n      <StyledBetResult>\n        {result === Result.WIN && !bet.claimed && (\n          <CollectWinningsButton\n            payout={payout}\n            epoch={bet.round.epoch}\n            hasClaimed={bet.claimed}\n            width=\"100%\"\n            mb=\"16px\"\n            onSuccess={handleSuccess}\n          >\n            {TranslateString(999, 'Collect Winnings')}\n          </CollectWinningsButton>\n        )}\n        {result === Result.CANCELED && isRefundable && (\n          <ReclaimPositionButton epoch={bet.round.epoch} width=\"100%\" mb=\"16px\" />\n        )}\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n          <Text>{TranslateString(999, 'Your direction')}</Text>\n          <PositionTag betPosition={bet.position}>\n            {bet.position === BetPosition.BULL ? TranslateString(999, 'Up') : TranslateString(999, 'Down')}\n          </PositionTag>\n        </Flex>\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n          <Text>{TranslateString(999, 'Your position')}</Text>\n          <Text>{`${formatBnb(bet.amount)} BNB`}</Text>\n        </Flex>\n        <Flex alignItems=\"start\" justifyContent=\"space-between\">\n          <Text bold>{TranslateString(999, 'Your Result')}</Text>\n          <Box style={{ textAlign: 'right' }}>\n            <Text bold color={getResultColor()}>{`${result === Result.LOSE ? '-' : '+'}${formatBnb(payout)} BNB`}</Text>\n            <Text fontSize=\"12px\" color=\"textSubtle\">\n              {`~$${formatBnb(bnbBusdPrice.times(payout).toNumber())}`}\n            </Text>\n          </Box>\n        </Flex>\n      </StyledBetResult>\n    </>\n  )\n}\n\nexport default BetResult\n","import { useWeb3React } from '@web3-react/core'\nimport { useEffect } from 'react'\nimport { useAppDispatch } from 'state'\nimport { updateMarketData } from 'state/predictions'\nimport { getMarketData } from 'state/predictions/helpers'\n\nconst POLL_TIME_IN_SECONDS = 10\n\nconst usePollRoundData = () => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  useEffect(() => {\n    const timer = setInterval(async () => {\n      const marketData = await getMarketData()\n\n      dispatch(updateMarketData(marketData))\n    }, POLL_TIME_IN_SECONDS * 1000)\n\n    return () => {\n      clearInterval(timer)\n    }\n  }, [account, dispatch])\n}\n\nexport default usePollRoundData\n","import styled from 'styled-components'\n\nconst Container = styled.div`\n  background: ${({ theme }) => theme.colors.gradients.violetAlt};\n  height: calc(100vh - 64px);\n  min-height: calc(100vh - 64px);\n  overflow: hidden;\n  position: relative;\n`\n\nexport default Container\n","import React, { useEffect, useRef, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled, { css, keyframes } from 'styled-components'\nimport { Button, CloseIcon, IconButton, TrophyGoldIcon } from '@pancakeswap-libs/uikit'\nimport { CSSTransition } from 'react-transition-group'\nimport useI18n from 'hooks/useI18n'\nimport { getBetHistory } from 'state/predictions/helpers'\nimport { useGetPredictionsStatus, useIsHistoryPaneOpen } from 'state/hooks'\nimport { useAppDispatch } from 'state'\nimport { setHistoryPaneState } from 'state/predictions'\n\n/**\n * @see https://github.com/animate-css/animate.css/tree/main/source\n */\nconst bounceInKeyframe = keyframes`\n  from,\n  60%,\n  75%,\n  90%,\n  to {\n    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\n  }\n\n  from {\n    opacity: 0;\n    transform: translate3d(0, 3000px, 0) scaleY(5);\n  }\n\n  60% {\n    opacity: 1;\n    transform: translate3d(0, -20px, 0) scaleY(0.9);\n  }\n\n  75% {\n    transform: translate3d(0, 10px, 0) scaleY(0.95);\n  }\n\n  90% {\n    transform: translate3d(0, -5px, 0) scaleY(0.985);\n  }\n\n  to {\n    transform: translate3d(0, 0, 0);\n  }\n`\n\nconst bounceOutKeyframe = keyframes`\n  20% {\n    transform: translate3d(0, 10px, 0) scaleY(0.985);\n  }\n\n  40%,\n  45% {\n    opacity: 1;\n    transform: translate3d(0, -20px, 0) scaleY(0.9);\n  }\n\n  to {\n    opacity: 0;\n    transform: translate3d(0, 2000px, 0) scaleY(3);\n  }\n`\n\nconst bounceInAnimation = css`\n  animation: ${bounceInKeyframe} 1s;\n`\n\nconst bounceOutAnimation = css`\n  animation: ${bounceOutKeyframe} 1s;\n`\n\nconst Wrapper = styled.div`\n  align-items: center;\n  bottom: 72px;\n  color: #ffffff;\n  display: flex;\n  justify-content: center;\n  left: 0;\n  padding-left: 16px;\n  padding-right: 16px;\n  position: absolute;\n  width: 100%;\n  z-index: 50;\n\n  &.popup-enter-active {\n    ${bounceInAnimation}\n  }\n\n  &.popup-enter-done {\n    bottom: 72px;\n  }\n\n  &.popup-exit-done {\n    bottom: -2000px;\n  }\n\n  &.popup-exit-active {\n    ${bounceOutAnimation}\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    bottom: 16px;\n    justify-content: flex-end;\n\n    &.popup-enter-done {\n      bottom: 16px;\n    }\n  }\n`\n\nconst Popup = styled.div`\n  align-items: center;\n  background-color: ${({ theme }) => theme.colors.secondary};\n  border-radius: 32px;\n  color: #ffffff;\n  display: flex;\n  max-width: 320px;\n  padding: 16px 8px;\n`\n\nconst CollectWinningsPopup = () => {\n  const [isOpen, setIsOpen] = useState(false)\n  const TranslateString = useI18n()\n  const ref = useRef(null)\n  const timer = useRef(null)\n  const { account } = useWeb3React()\n  const predictionStatus = useGetPredictionsStatus()\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\n  const dispatch = useAppDispatch()\n\n  const handleOpenHistory = () => {\n    dispatch(setHistoryPaneState(true))\n  }\n\n  const handleClick = () => {\n    setIsOpen(false)\n    clearInterval(timer.current)\n  }\n\n  // Check user's history for unclaimed winners\n  useEffect(() => {\n    if (account) {\n      timer.current = setInterval(async () => {\n        const bets = await getBetHistory({ user: account.toLowerCase(), claimed: false })\n\n        // Filter out bets that were not winners\n        const winnerBets = bets.filter((bet) => {\n          return bet.position === bet.round.position\n        })\n\n        if (!isHistoryPaneOpen) {\n          setIsOpen(winnerBets.length > 0)\n        }\n      }, 30000)\n    }\n\n    return () => {\n      clearInterval(timer.current)\n    }\n  }, [account, timer, predictionStatus, setIsOpen, isHistoryPaneOpen])\n\n  // Any time the history pane is open make sure the popup closes\n  useEffect(() => {\n    if (isHistoryPaneOpen) {\n      setIsOpen(false)\n    }\n  }, [isHistoryPaneOpen, setIsOpen])\n\n  return (\n    <CSSTransition in={isOpen} unmountOnExit nodeRef={ref} timeout={1000} classNames=\"popup\">\n      <Wrapper ref={ref}>\n        <Popup>\n          <TrophyGoldIcon width=\"64px\" style={{ flex: 'none' }} mr=\"8px\" />\n          <Button style={{ flex: 1 }} onClick={handleOpenHistory}>\n            {TranslateString(999, 'Collect Winnings')}\n          </Button>\n          <IconButton variant=\"text\" onClick={handleClick}>\n            <CloseIcon color=\"primary\" width=\"24px\" />\n          </IconButton>\n        </Popup>\n      </Wrapper>\n    </CSSTransition>\n  )\n}\n\nexport default CollectWinningsPopup\n","import React, { createContext, Dispatch, useState } from 'react'\nimport SwiperCore from 'swiper'\n\ninterface Context {\n  swiper: SwiperCore\n  setSwiper: Dispatch<React.SetStateAction<SwiperCore>>\n  destroySwiper: () => void\n}\n\nexport const SwiperContext = createContext<Context>(undefined)\n\nconst SwiperProvider = ({ children }) => {\n  const [swiper, setSwiper] = useState<SwiperCore>(null)\n\n  const destroySwiper = () => {\n    if (swiper) {\n      swiper.destroy()\n      setSwiper(null)\n    }\n  }\n\n  return <SwiperContext.Provider value={{ swiper, setSwiper, destroySwiper }}>{children}</SwiperContext.Provider>\n}\n\nexport default SwiperProvider\n","import React, { useEffect } from 'react'\nimport { Box } from '@pancakeswap-libs/uikit'\nimport { DefaultTheme, useTheme } from 'styled-components'\n\n/**\n * When the script tag is injected the TradingView object is not immediately\n * available on the window. So we listen for when it gets set\n */\nconst tradingViewListener = async () =>\n  new Promise<void>((resolve) =>\n    Object.defineProperty(window, 'TradingView', {\n      configurable: true,\n      set(value) {\n        this.tv = value\n        resolve(value)\n      },\n    }),\n  )\n\nconst initializeTradingView = (TradingViewObj: any, theme: DefaultTheme) => {\n  /* eslint-disable new-cap */\n  /* eslint-disable no-new */\n  // @ts-ignore\n  new TradingViewObj.widget({\n    autosize: true,\n    height: '100%',\n    symbol: 'BINANCE:BNBUSDT',\n    interval: '5',\n    timezone: 'Etc/UTC',\n    theme: theme.isDark ? 'dark' : 'light',\n    style: '1',\n    locale: 'en',\n    toolbar_bg: '#f1f3f6',\n    enable_publishing: false,\n    allow_symbol_change: true,\n    container_id: 'tradingview_b239c',\n  })\n}\n\nconst TradingView = () => {\n  const theme = useTheme()\n\n  useEffect(() => {\n    // @ts-ignore\n    if (window.TradingView) {\n      // @ts-ignore\n      initializeTradingView(window.TradingView, theme)\n    } else {\n      tradingViewListener().then((tv) => {\n        initializeTradingView(tv, theme)\n      })\n    }\n  }, [theme])\n\n  return (\n    <Box overflow=\"hidden\" className=\"tradingview_container\">\n      <div id=\"tradingview_b239c\" />\n    </Box>\n  )\n}\n\nexport default TradingView\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading } from '@pancakeswap-libs/uikit'\n\ninterface NotificationProps {\n  title: string\n}\n\n// const BunnyDecoration = styled.div`\n//   position: absolute;\n//   top: -130px; // line up bunny at the top of the modal\n//   left: 0px;\n//   text-align: center;\n//   width: 100%;\n// `\n\nconst Wrapper = styled.div`\n  align-items: center;\n  display: flex;\n  flex: 1;\n  height: 100%;\n  justify-content: center;\n`\n\nconst CardWrapper = styled.div`\n  position: relative;\n  width: 320px;\n`\n\nconst BunnyDecoration = styled.div`\n  position: absolute;\n  top: -130px;\n  left: 0px;\n  text-align: center;\n  width: 100%;\n  z-index: 5;\n`\n\nconst Notification: React.FC<NotificationProps> = ({ title, children }) => {\n  return (\n    <Wrapper>\n      <CardWrapper>\n        <BunnyDecoration>\n          <img src=\"/images/decorations/hiccup-bunny.png\" alt=\"bunny decoration\" height=\"121px\" width=\"130px\" />\n        </BunnyDecoration>\n        <Card>\n          <CardBody>\n            <Heading mb=\"24px\">{title}</Heading>\n            {children}\n          </CardBody>\n        </Card>\n      </CardWrapper>\n    </Wrapper>\n  )\n}\n\nexport default Notification\n","import React from 'react'\nimport { Button, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useAppDispatch } from 'state'\nimport { setHistoryPaneState } from 'state/predictions'\nimport Notification from './Notification'\n\nconst ErrorNotification = () => {\n  const TranslateString = useI18n()\n  const dispatch = useAppDispatch()\n\n  const handleOpenHistory = () => {\n    dispatch(setHistoryPaneState(true))\n  }\n  return (\n    <Notification title={TranslateString(999, 'Error')}>\n      <Text as=\"p\" mb=\"24px\">\n        {TranslateString(999, \"This page can't be displayed right now due to an error. Please check back soon.\")}\n      </Text>\n      <Button variant=\"primary\" width=\"100%\" onClick={handleOpenHistory}>\n        {TranslateString(999, 'Show History')}\n      </Button>\n    </Notification>\n  )\n}\n\nexport default ErrorNotification\n","import React from 'react'\nimport { Box, Button, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useAppDispatch } from 'state'\nimport { setHistoryPaneState } from 'state/predictions'\nimport Notification from './Notification'\n\nconst PauseNotification = () => {\n  const TranslateString = useI18n()\n  const dispatch = useAppDispatch()\n\n  const handleOpenHistory = () => {\n    dispatch(setHistoryPaneState(true))\n  }\n\n  return (\n    <Notification title={TranslateString(999, 'Markets Paused')}>\n      <Box mb=\"24px\">\n        <Text as=\"p\">{TranslateString(999, 'Prediction markets have been paused due to an error.')}</Text>\n        <Text as=\"p\">{TranslateString(999, 'All open positions have been cancelled.')}</Text>\n        <Text as=\"p\">\n          {TranslateString(\n            999,\n            'You can reclaim any funds entered into existing positions via the History tab on this page.',\n          )}\n        </Text>\n      </Box>\n      <Button variant=\"primary\" width=\"100%\" onClick={handleOpenHistory}>\n        {TranslateString(999, 'Show History')}\n      </Button>\n    </Notification>\n  )\n}\n\nexport default PauseNotification\n","import BigNumber from 'bignumber.js'\nimport { Bet, BetPosition } from 'state/types'\nimport { DefaultTheme } from 'styled-components'\nimport { formatNumber, getBalanceAmount } from 'utils/formatBalance'\nimport getTimePeriods from 'utils/getTimePeriods'\n\nexport const getBnbAmount = (bnbBn: BigNumber) => {\n  return getBalanceAmount(bnbBn, 18)\n}\n\nexport const formatUsd = (usd: number) => {\n  return `$${formatNumber(usd || 0, 3, 3)}`\n}\n\nexport const formatBnb = (bnb: number) => {\n  return bnb ? bnb.toLocaleString(undefined, { minimumFractionDigits: 3, maximumFractionDigits: 3 }) : '0'\n}\n\nexport const formatBnbFromBigNumber = (bnbBn: BigNumber) => {\n  return formatBnb(getBnbAmount(bnbBn).toNumber())\n}\n\nexport const padTime = (num: number) => num.toString().padStart(2, '0')\n\nexport const formatRoundTime = (secondsBetweenBlocks: number) => {\n  const { hours, minutes, seconds } = getTimePeriods(secondsBetweenBlocks)\n  const minutesSeconds = `${padTime(minutes)}:${padTime(seconds)}`\n\n  if (hours > 0) {\n    return `${padTime(hours)}:${minutesSeconds}`\n  }\n\n  return minutesSeconds\n}\n\nexport const getMultiplier = (total: number, amount: number) => {\n  if (total === 0 || amount === 0) {\n    return 0\n  }\n\n  return total / amount\n}\n\n/**\n * Calculates the total payout given a bet\n */\nexport const getPayout = (bet: Bet) => {\n  if (!bet || !bet.round) {\n    return 0\n  }\n\n  const { bullAmount, bearAmount, totalAmount } = bet.round\n  const multiplier = getMultiplier(totalAmount, bet.position === BetPosition.BULL ? bullAmount : bearAmount)\n  return bet.amount * multiplier\n}\n\n// TODO: Move this to the UI Kit\nexport const getBubbleGumBackground = (theme: DefaultTheme) => {\n  if (theme.isDark) {\n    return 'linear-gradient(139.73deg, #142339 0%, #24243D 47.4%, #37273F 100%)'\n  }\n\n  return 'linear-gradient(139.73deg, #E6FDFF 0%, #EFF4F5 46.87%, #F3EFFF 100%)'\n}\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport {\n  ModalContainer,\n  ModalBody,\n  ModalTitle,\n  ModalHeader,\n  InjectedModalProps,\n  Button,\n  AutoRenewIcon,\n  TrophyGoldIcon,\n  Text,\n  Flex,\n  Heading,\n  Box,\n  LinkExternal,\n  ModalCloseButton,\n} from '@pancakeswap-libs/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { usePriceBnbBusd } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport useToast from 'hooks/useToast'\nimport { usePredictionsContract } from 'hooks/useContract'\nimport { formatBnb } from '../helpers'\n\ninterface CollectRoundWinningsModalProps extends InjectedModalProps {\n  payout: number\n  epoch: number\n  onSuccess?: () => Promise<void>\n}\n\nconst Modal = styled(ModalContainer)`\n  overflow: visible;\n`\n\nconst BunnyDecoration = styled.div`\n  position: absolute;\n  top: -116px; // line up bunny at the top of the modal\n  left: 0px;\n  text-align: center;\n  width: 100%;\n`\n\nconst CollectRoundWinningsModal: React.FC<CollectRoundWinningsModalProps> = ({\n  payout,\n  epoch,\n  onDismiss,\n  onSuccess,\n}) => {\n  const [isPendingTx, setIsPendingTx] = useState(false)\n  const { account } = useWeb3React()\n  const TranslateString = useI18n()\n  const { toastSuccess, toastError } = useToast()\n  const predictionsContract = usePredictionsContract()\n  const bnbBusdPrice = usePriceBnbBusd()\n\n  const handleClick = () => {\n    predictionsContract.methods\n      .claim(epoch)\n      .send({ from: account })\n      .once('sending', () => {\n        setIsPendingTx(true)\n      })\n      .once('receipt', async (result) => {\n        if (onSuccess) {\n          await onSuccess()\n        }\n\n        setIsPendingTx(false)\n        onDismiss()\n        toastSuccess(\n          TranslateString(999, 'Winnings collected!'),\n          <Box>\n            <Text as=\"p\" mb=\"8px\">\n              {TranslateString(999, 'Your prizes have been sent to your wallet')}\n            </Text>\n            {result.transactionHash && (\n              <LinkExternal href={`https://bscscan.com/tx/${result.transactionHash}`}>\n                {TranslateString(356, 'View on BscScan')}\n              </LinkExternal>\n            )}\n          </Box>,\n        )\n      })\n      .once('error', (error) => {\n        setIsPendingTx(false)\n        toastError('Error', error?.message)\n        console.error(error)\n      })\n  }\n\n  return (\n    <Modal minWidth=\"288px\" position=\"relative\" mt=\"124px\">\n      <BunnyDecoration>\n        <img src=\"/images/decorations/prize-bunny.png\" alt=\"bunny decoration\" height=\"124px\" width=\"168px\" />\n      </BunnyDecoration>\n      <ModalHeader>\n        <ModalTitle>\n          <Heading>{TranslateString(556, 'Collect Winnings')}</Heading>\n        </ModalTitle>\n        <ModalCloseButton onDismiss={onDismiss} />\n      </ModalHeader>\n      <ModalBody p=\"24px\">\n        <TrophyGoldIcon width=\"96px\" mx=\"auto\" mb=\"24px\" />\n        <Flex alignItems=\"start\" justifyContent=\"space-between\" mb=\"24px\">\n          <Text>{TranslateString(999, 'Collecting')}</Text>\n          <Box style={{ textAlign: 'right' }}>\n            <Text>{formatBnb(payout)}</Text>\n            <Text fontSize=\"12px\" color=\"textSubtle\">\n              {`~$${formatBnb(bnbBusdPrice.times(payout).toNumber())}`}\n            </Text>\n          </Box>\n        </Flex>\n        <Button\n          width=\"100%\"\n          mb=\"8px\"\n          onClick={handleClick}\n          isLoading={isPendingTx}\n          endIcon={isPendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n        >\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalBody>\n    </Modal>\n  )\n}\n\nexport default CollectRoundWinningsModal\n","import React from 'react'\nimport { Button, ButtonProps, useModal } from '@pancakeswap-libs/uikit'\nimport CollectRoundWinningsModal from './CollectRoundWinningsModal'\n\ninterface CollectWinningsButtonProps extends ButtonProps {\n  payout: number\n  epoch: number\n  hasClaimed: boolean\n  onSuccess?: () => Promise<void>\n}\n\nconst CollectWinningsButton: React.FC<CollectWinningsButtonProps> = ({\n  payout,\n  epoch,\n  hasClaimed,\n  onSuccess,\n  children,\n  ...props\n}) => {\n  const [onPresentCollectWinningsModal] = useModal(\n    <CollectRoundWinningsModal payout={payout} epoch={epoch} onSuccess={onSuccess} />,\n    false,\n  )\n\n  return (\n    <Button onClick={onPresentCollectWinningsModal} disabled={hasClaimed} {...props}>\n      {children}\n    </Button>\n  )\n}\n\nexport default CollectWinningsButton\n","import React, { ReactNode, useState } from 'react'\nimport { AutoRenewIcon, Button, ButtonProps } from '@pancakeswap-libs/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport useI18n from 'hooks/useI18n'\nimport { usePredictionsContract } from 'hooks/useContract'\nimport useToast from 'hooks/useToast'\n\ninterface ReclaimPositionButtonProps extends ButtonProps {\n  epoch: number\n  onSuccess?: () => Promise<void>\n  children?: ReactNode\n}\n\nconst ReclaimPositionButton: React.FC<ReclaimPositionButtonProps> = ({ epoch, onSuccess, children, ...props }) => {\n  const [isPendingTx, setIsPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const { account } = useWeb3React()\n  const predictionsContract = usePredictionsContract()\n  const { toastSuccess, toastError } = useToast()\n\n  const handleReclaim = () => {\n    predictionsContract.methods\n      .claim(epoch)\n      .send({ from: account })\n      .once('sending', () => {\n        setIsPendingTx(true)\n      })\n      .once('receipt', async () => {\n        if (onSuccess) {\n          await onSuccess()\n        }\n        setIsPendingTx(false)\n        toastSuccess(TranslateString(999, 'Position reclaimed!'))\n      })\n      .once('error', (error) => {\n        setIsPendingTx(false)\n        toastError('Error', error?.message)\n        console.error(error)\n      })\n  }\n\n  return (\n    <Button\n      onClick={handleReclaim}\n      isLoading={isPendingTx}\n      endIcon={isPendingTx ? <AutoRenewIcon spin color=\"white\" /> : null}\n      {...props}\n    >\n      {children || TranslateString(999, 'Reclaim Position')}\n    </Button>\n  )\n}\n\nexport default ReclaimPositionButton\n","import React, { ReactNode } from 'react'\nimport styled from 'styled-components'\nimport { ArrowUpIcon, ArrowDownIcon, Flex, FlexProps, Text } from '@pancakeswap-libs/uikit'\nimport { BetPosition } from 'state/types'\n\ninterface TagProps extends FlexProps {\n  bg?: string\n  startIcon?: ReactNode\n}\n\nconst StyledTag = styled(Flex)<{ bg: TagProps['bg'] }>`\n  background-color: ${({ bg, theme }) => theme.colors[bg]};\n  display: inline-flex;\n`\n\nexport const Tag: React.FC<TagProps> = ({ bg = 'success', startIcon, children, onClick, ...props }) => {\n  const icon = startIcon || <ArrowUpIcon color=\"white\" />\n\n  return (\n    <StyledTag\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      borderRadius=\"4px\"\n      bg={bg}\n      py=\"4px\"\n      px=\"8px\"\n      onClick={onClick}\n      style={{ cursor: onClick ? 'pointer' : 'normal' }}\n      {...props}\n    >\n      {icon}\n      <Text textTransform=\"uppercase\" color=\"white\" ml=\"4px\">\n        {children}\n      </Text>\n    </StyledTag>\n  )\n}\n\ninterface PositionTagProps extends FlexProps {\n  betPosition: BetPosition\n}\n\nconst PositionTag: React.FC<PositionTagProps> = ({ betPosition, children, ...props }) => {\n  const isUpPosition = betPosition === BetPosition.BULL\n  const icon = isUpPosition ? <ArrowUpIcon color=\"white\" /> : <ArrowDownIcon color=\"white\" />\n\n  return (\n    <Tag bg={isUpPosition ? 'success' : 'failure'} startIcon={icon} {...props}>\n      {children}\n    </Tag>\n  )\n}\n\nexport default PositionTag\n","import React from 'react'\nimport styled, { DefaultTheme } from 'styled-components'\nimport { Box, Flex, FlexProps, Text } from '@pancakeswap-libs/uikit'\nimport { formatBnb, formatUsd } from 'views/Predictions/helpers'\nimport useI18n from 'hooks/useI18n'\nimport { BetPosition, Round } from 'state/types'\n\n// PrizePoolRow\ninterface PrizePoolRowProps extends FlexProps {\n  totalAmount: Round['totalAmount']\n}\n\nconst getPrizePoolAmount = (totalAmount: PrizePoolRowProps['totalAmount']) => {\n  if (!totalAmount) {\n    return '0'\n  }\n\n  return formatBnb(totalAmount)\n}\n\nexport const PrizePoolRow: React.FC<PrizePoolRowProps> = ({ totalAmount, ...props }) => {\n  const TranslateString = useI18n()\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\" {...props}>\n      <Text bold>{TranslateString(999, 'Prize Pool')}:</Text>\n      <Text bold>{`${getPrizePoolAmount(totalAmount)} BNB`}</Text>\n    </Flex>\n  )\n}\n\n// LockPriceRow\ninterface LockPriceRowProps extends FlexProps {\n  lockPrice: Round['lockPrice']\n}\n\nexport const LockPriceRow: React.FC<LockPriceRowProps> = ({ lockPrice, ...props }) => {\n  const TranslateString = useI18n()\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\" {...props}>\n      <Text fontSize=\"14px\">{TranslateString(999, 'Locked Price')}:</Text>\n      <Text fontSize=\"14px\">{formatUsd(lockPrice)}</Text>\n    </Flex>\n  )\n}\n\n// RoundResultBox\ninterface RoundResultBoxProps {\n  betPosition?: BetPosition\n  isNext?: boolean\n  isLive?: boolean\n  hasEntered?: boolean\n}\n\nconst getBackgroundColor = ({\n  theme,\n  betPosition,\n  isNext,\n  isLive,\n  hasEntered,\n}: RoundResultBoxProps & { theme: DefaultTheme }) => {\n  if (isNext) {\n    return 'linear-gradient(180deg, #53DEE9 0%, #7645D9 100%)'\n  }\n\n  if (hasEntered || isLive) {\n    return theme.colors.secondary\n  }\n\n  if (betPosition === BetPosition.BULL) {\n    return theme.colors.success\n  }\n\n  if (betPosition === BetPosition.BEAR) {\n    return theme.colors.failure\n  }\n\n  return theme.colors.borderColor\n}\n\nconst Background = styled(Box)<RoundResultBoxProps>`\n  background: ${getBackgroundColor};\n  border-radius: 16px;\n  padding: 2px;\n`\n\nconst StyledRoundResultBox = styled.div`\n  background: ${({ theme }) => theme.card.background};\n  border-radius: 14px;\n  padding: 16px;\n`\n\nexport const RoundResultBox: React.FC<RoundResultBoxProps> = ({\n  isNext = false,\n  hasEntered = false,\n  isLive = false,\n  children,\n  ...props\n}) => {\n  return (\n    <Background isNext={isNext} hasEntered={hasEntered} isLive={isLive} {...props}>\n      <StyledRoundResultBox>{children}</StyledRoundResultBox>\n    </Background>\n  )\n}\n","import React from 'react'\nimport { BoxProps, Flex, Text } from '@pancakeswap-libs/uikit'\nimport { BetPosition, Round } from 'state/types'\nimport useI18n from 'hooks/useI18n'\nimport { formatUsd } from '../../helpers'\nimport PositionTag from '../PositionTag'\nimport { LockPriceRow, PrizePoolRow, RoundResultBox } from './styles'\n\ninterface RoundResultProps extends BoxProps {\n  round: Round\n}\n\nconst RoundResult: React.FC<RoundResultProps> = ({ round, ...props }) => {\n  const { lockPrice, closePrice, totalAmount } = round\n  const betPosition = closePrice > lockPrice ? BetPosition.BULL : BetPosition.BEAR\n  const isPositionUp = betPosition === BetPosition.BULL\n  const TranslateString = useI18n()\n  const priceDifference = closePrice - lockPrice\n\n  return (\n    <RoundResultBox betPosition={betPosition} {...props}>\n      <Text color=\"textSubtle\" fontSize=\"12px\" bold textTransform=\"uppercase\" mb=\"8px\">\n        {TranslateString(999, 'Closed Price')}\n      </Text>\n      {round.failed ? (\n        <Text bold textTransform=\"uppercase\" color=\"textDisabled\" mb=\"16px\" fontSize=\"24px\">\n          {TranslateString(999, 'Canceled')}\n        </Text>\n      ) : (\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n          <Text color={isPositionUp ? 'success' : 'failure'} bold fontSize=\"24px\">\n            {formatUsd(closePrice)}\n          </Text>\n          <PositionTag betPosition={betPosition}>{formatUsd(priceDifference)}</PositionTag>\n        </Flex>\n      )}\n      {lockPrice && <LockPriceRow lockPrice={lockPrice} />}\n      <PrizePoolRow totalAmount={totalAmount} />\n    </RoundResultBox>\n  )\n}\n\nexport default RoundResult\n","import { useEffect, useState } from 'react'\nimport { usePredictionsContract } from 'hooks/useContract'\nimport { useWeb3React } from '@web3-react/core'\n\nconst useIsRefundable = (epoch: number) => {\n  const [isRefundable, setIsRefundable] = useState(false)\n  const predictionsContract = usePredictionsContract()\n  const { account } = useWeb3React()\n\n  useEffect(() => {\n    const fetchRefundableStatus = async () => {\n      const canClaim = await predictionsContract.methods.claimable(epoch, account).call()\n\n      if (canClaim) {\n        const refundable = await predictionsContract.methods.refundable(epoch, account).call()\n        setIsRefundable(refundable)\n      } else {\n        setIsRefundable(false)\n      }\n    }\n\n    if (account) {\n      fetchRefundableStatus()\n    }\n  }, [account, epoch, predictionsContract, setIsRefundable])\n\n  return { isRefundable, setIsRefundable }\n}\n\nexport default useIsRefundable\n","import { useCallback, useEffect, useRef, useState } from 'react'\n\n// Only support specific token pairs until we find a method to validate token pairs\nexport enum TokenPair {\n  BNBUSDT = 'bnbusdt',\n}\n\n/**\n * @see https://binance-docs.github.io/apidocs/spot/en/#individual-symbol-ticker-streams\n */\nexport interface StreamData {\n  e: string\n  E: number\n  s: string\n  p: string\n  P: string\n  w: string\n  x: string\n  c: string\n  Q: string\n  b: string\n  B: string\n  a: string\n  A: string\n  o: string\n  h: string\n  l: string\n  v: string\n  q: string\n  O: number\n  C: number\n  F: number\n  L: number\n  n: number\n}\n\nexport interface TickerStream {\n  eventType: string\n  eventTime: number\n  symbol: string\n  priceChange: number\n  priceChangePercent: number\n  weightAveragePrice: number\n  firstTrade: number\n  lastPrice: number\n  lastQuantity: number\n  bestBidPrice: number\n  bestBidQuantity: number\n  bestAskPrice: number\n  bestAskQuantity: number\n  openPrice: number\n  highPrice: number\n  lowPrice: number\n  totalTradedBaseAssetVolume: number\n  totalTradedQuoteAssetVolume: number\n  statisticsOpenTime: number\n  statisticsCloseTime: number\n  firstTradeId: number\n  lastTradeId: number\n  totalNumberOfTrades: number\n}\n\nexport const useTokenPairTicker = (tokenPair: TokenPair, connectOnMount: boolean) => {\n  // Use a ref instead of state so we mark the connection as closed immediately without\n  // triggering a re-render\n  const isConnected = useRef(false)\n  const [stream, setStream] = useState<TickerStream>(null)\n  const websocket = useRef<WebSocket>(null)\n\n  const connect = useCallback(() => {\n    if (navigator.onLine && !isConnected.current) {\n      const ws = new WebSocket(`wss://stream.binance.com:9443/ws/streams/${tokenPair}@ticker`)\n\n      ws.onopen = () => {\n        isConnected.current = true\n      }\n\n      ws.onclose = () => {\n        isConnected.current = false\n      }\n\n      ws.onerror = (error) => {\n        console.error('Ticker:', error)\n        throw new Error('Ticker: An error occurred')\n      }\n\n      ws.onmessage = (evt) => {\n        try {\n          const data = JSON.parse(evt.data) as StreamData\n\n          if (isConnected.current) {\n            setStream({\n              eventType: data.e,\n              eventTime: data.E,\n              symbol: data.s,\n              priceChange: parseFloat(data.p),\n              priceChangePercent: parseFloat(data.P),\n              weightAveragePrice: parseFloat(data.w),\n              firstTrade: parseFloat(data.x),\n              lastPrice: parseFloat(data.c),\n              lastQuantity: Number(data.Q),\n              bestBidPrice: parseFloat(data.b),\n              bestBidQuantity: Number(data.B),\n              bestAskPrice: parseFloat(data.a),\n              bestAskQuantity: Number(data.A),\n              openPrice: parseFloat(data.o),\n              highPrice: parseFloat(data.h),\n              lowPrice: parseFloat(data.l),\n              totalTradedBaseAssetVolume: Number(data.v),\n              totalTradedQuoteAssetVolume: Number(data.q),\n              statisticsOpenTime: Number(data.O),\n              statisticsCloseTime: Number(data.C),\n              firstTradeId: Number(data.F),\n              lastTradeId: Number(data.L),\n              totalNumberOfTrades: Number(data.n),\n            })\n          }\n        } catch (error) {\n          console.error(`Error parsing data from stream`, error)\n        }\n      }\n\n      websocket.current = ws\n    }\n  }, [websocket, tokenPair, isConnected, setStream])\n\n  const disconnect = useCallback(() => {\n    isConnected.current = false\n\n    if (websocket.current) {\n      websocket.current.close()\n    }\n  }, [isConnected, websocket])\n\n  useEffect(() => {\n    if (connectOnMount) {\n      connect()\n    }\n\n    return () => disconnect()\n  }, [websocket, connect, disconnect, connectOnMount, isConnected])\n\n  return { stream, isConnected: isConnected.current, connect, disconnect }\n}\n\n// Token pair helpers\nexport const useBnbUsdtTicker = (connectOnMount = true) => {\n  return useTokenPairTicker(TokenPair.BNBUSDT, connectOnMount)\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Bet } from 'state/types'\nimport useI18n from 'hooks/useI18n'\nimport { Flex, Text, Link, Heading } from '@pancakeswap-libs/uikit'\nimport { RoundResult } from '../RoundResult'\nimport BetResult, { Result } from './BetResult'\n\ninterface BetDetailsProps {\n  bet: Bet\n  result: Result\n}\n\nconst StyledBetDetails = styled.div`\n  background-color: ${({ theme }) => theme.colors.dropdown};\n  border-bottom: 2px solid ${({ theme }) => theme.colors.borderColor};\n  padding: 24px;\n`\n\nconst BetDetails: React.FC<BetDetailsProps> = ({ bet, result }) => {\n  const TranslateString = useI18n()\n\n  return (\n    <StyledBetDetails>\n      {result === Result.CANCELED && (\n        <Text as=\"p\" color=\"failure\" mb=\"24px\">\n          {TranslateString(\n            999,\n            'This round was automatically canceled due to an error. If you entered a position, please reclaim your funds below.',\n          )}\n        </Text>\n      )}\n      {result !== Result.LIVE && <BetResult bet={bet} result={result} />}\n      <Heading mb=\"8px\">{TranslateString(999, 'Round History')}</Heading>\n      <RoundResult round={bet.round} mb=\"24px\" />\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n        <Text>{TranslateString(999, 'Opening Block')}</Text>\n        <Link href={`https://bscscan.com/block/${bet.round.lockBlock}`} external>\n          {bet.round.lockBlock}\n        </Link>\n      </Flex>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\n        <Text>{TranslateString(999, 'Closing Block')}</Text>\n        <Link href={`https://bscscan.com/block/${bet.round.endBlock}`} external>\n          {bet.round.endBlock}\n        </Link>\n      </Flex>\n    </StyledBetDetails>\n  )\n}\n\nexport default BetDetails\n","import React, { useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport {\n  Box,\n  ChevronDownIcon,\n  ChevronUpIcon,\n  Flex,\n  IconButton,\n  PlayCircleOutlineIcon,\n  Text,\n} from '@pancakeswap-libs/uikit'\nimport styled from 'styled-components'\nimport { useAppDispatch } from 'state'\nimport { markBetAsCollected } from 'state/predictions'\nimport { Bet, BetPosition, PredictionStatus } from 'state/types'\nimport { useGetCurrentEpoch, useGetPredictionsStatus } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport { formatBnb, getPayout } from '../../helpers'\nimport CollectWinningsButton from '../CollectWinningsButton'\nimport ReclaimPositionButton from '../ReclaimPositionButton'\nimport BetDetails from './BetDetails'\nimport { Result } from './BetResult'\n\ninterface BetProps {\n  bet: Bet\n}\n\nconst StyledBet = styled(Flex).attrs({ alignItems: 'center', p: '16px' })`\n  background-color: ${({ theme }) => theme.card.background};\n  border-bottom: 2px solid ${({ theme }) => theme.colors.borderColor};\n`\n\nconst YourResult = styled(Box)`\n  flex: 1;\n`\n\nconst HistoricalBet: React.FC<BetProps> = ({ bet }) => {\n  const [isOpen, setIsOpen] = useState(false)\n  const { amount, claimed, position, round } = bet\n\n  const TranslateString = useI18n()\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const currentEpoch = useGetCurrentEpoch()\n  const status = useGetPredictionsStatus()\n  const roundResultPosition = round.closePrice > round.lockPrice ? BetPosition.BULL : BetPosition.BEAR\n\n  const toggleOpen = () => setIsOpen(!isOpen)\n\n  const getRoundResult = () => {\n    if (round.failed) {\n      return Result.CANCELED\n    }\n\n    if (round.epoch >= currentEpoch - 1) {\n      return Result.LIVE\n    }\n\n    return position === roundResultPosition ? Result.WIN : Result.LOSE\n  }\n\n  const getRoundColor = (result) => {\n    switch (result) {\n      case Result.WIN:\n        return 'success'\n      case Result.LOSE:\n        return 'failure'\n      case Result.CANCELED:\n        return 'textDisabled'\n      default:\n        return 'text'\n    }\n  }\n\n  const getRoundPrefix = (result) => {\n    if (result === Result.LOSE) {\n      return '-'\n    }\n\n    if (result === Result.WIN) {\n      return '+'\n    }\n\n    return ''\n  }\n\n  const handleSuccess = async () => {\n    dispatch(markBetAsCollected({ account, betId: bet.id }))\n  }\n\n  const roundResult = getRoundResult()\n  const resultTextColor = getRoundColor(roundResult)\n  const resultTextPrefix = getRoundPrefix(roundResult)\n  const isOpenRound = round.epoch === currentEpoch\n  const isLiveRound = status === PredictionStatus.LIVE && round.epoch === currentEpoch - 1\n\n  // Winners get the payout, otherwise the claim what they put it if it was canceled\n  const payout = roundResult === Result.WIN ? getPayout(bet) : amount\n\n  const renderBetLabel = () => {\n    if (isOpenRound) {\n      return (\n        <Flex alignItems=\"center\">\n          <PlayCircleOutlineIcon color=\"primary\" mr=\"6px\" width=\"24px\" />\n          <Text color=\"primary\" bold>\n            {TranslateString(999, 'Starting Soon')}\n          </Text>\n        </Flex>\n      )\n    }\n\n    if (isLiveRound) {\n      return (\n        <Flex alignItems=\"center\">\n          <PlayCircleOutlineIcon color=\"secondary\" mr=\"6px\" width=\"24px\" />\n          <Text color=\"secondary\" bold>\n            {TranslateString(999, 'Live Now')}\n          </Text>\n        </Flex>\n      )\n    }\n\n    return (\n      <>\n        <Text fontSize=\"12px\" color=\"textSubtle\">\n          {TranslateString(999, 'Your Result')}\n        </Text>\n        <Text bold color={resultTextColor} lineHeight={1}>\n          {roundResult === Result.CANCELED\n            ? TranslateString(999, 'Canceled')\n            : `${resultTextPrefix}${formatBnb(payout)}`}\n        </Text>\n      </>\n    )\n  }\n\n  return (\n    <>\n      <StyledBet>\n        <Box width=\"48px\">\n          <Text textAlign=\"center\">\n            <Text fontSize=\"12px\" color=\"textSubtle\">\n              {TranslateString(999, 'Round')}\n            </Text>\n            <Text bold lineHeight={1}>\n              {round.epoch.toLocaleString()}\n            </Text>\n          </Text>\n        </Box>\n        <YourResult px=\"24px\">{renderBetLabel()}</YourResult>\n        {roundResult === Result.WIN && !claimed && (\n          <CollectWinningsButton\n            onSuccess={handleSuccess}\n            hasClaimed={bet.claimed}\n            epoch={bet.round.epoch}\n            payout={payout}\n            scale=\"sm\"\n            mr=\"8px\"\n          >\n            {TranslateString(999, 'Collect')}\n          </CollectWinningsButton>\n        )}\n        {roundResult === Result.CANCELED && !claimed && (\n          <ReclaimPositionButton onSuccess={handleSuccess} epoch={bet.round.epoch} scale=\"sm\" mr=\"8px\">\n            {TranslateString(999, 'Reclaim')}\n          </ReclaimPositionButton>\n        )}\n        {!isOpenRound && !isLiveRound && (\n          <IconButton variant=\"text\" scale=\"sm\" onClick={toggleOpen}>\n            {isOpen ? <ChevronUpIcon /> : <ChevronDownIcon />}\n          </IconButton>\n        )}\n      </StyledBet>\n      {isOpen && <BetDetails bet={bet} result={getRoundResult()} />}\n    </>\n  )\n}\n\nexport default HistoricalBet\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { ArrowForwardIcon, Box, Button, Radio, Flex, Heading, Text } from '@pancakeswap-libs/uikit'\nimport { useAppDispatch } from 'state'\nimport { HistoryFilter } from 'state/types'\nimport { setHistoryFilter, setHistoryPaneState, fetchHistory } from 'state/predictions'\nimport { useGetHistoryFilter, useGetIsFetchingHistory } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport styled from 'styled-components'\nimport { getBubbleGumBackground } from '../../helpers'\n\nconst Filter = styled.label`\n  align-items: center;\n  cursor: pointer;\n  display: inline-flex;\n  margin-right: 16px;\n`\n\nconst StyledHeader = styled(Box)`\n  background: ${({ theme }) => getBubbleGumBackground(theme)};\n  flex: none;\n  padding: 16px;\n`\n\nconst getClaimParam = (historyFilter: HistoryFilter) => {\n  switch (historyFilter) {\n    case HistoryFilter.COLLECTED:\n      return true\n    case HistoryFilter.UNCOLLECTED:\n      return false\n    case HistoryFilter.ALL:\n    default:\n      return undefined\n  }\n}\n\nconst Header = () => {\n  const historyFilter = useGetHistoryFilter()\n  const isFetchingHistory = useGetIsFetchingHistory()\n  const TranslateString = useI18n()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const handleClick = () => {\n    dispatch(setHistoryPaneState(false))\n  }\n\n  const handleChange = (newFilter: HistoryFilter) => async () => {\n    if (newFilter !== historyFilter) {\n      await dispatch(fetchHistory({ account, claimed: getClaimParam(newFilter) }))\n      dispatch(setHistoryFilter(newFilter))\n    }\n  }\n\n  return (\n    <StyledHeader>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n        <Heading as=\"h3\" size=\"md\">\n          {TranslateString(999, 'Your History')}\n        </Heading>\n        <Button onClick={handleClick} variant=\"text\" endIcon={<ArrowForwardIcon color=\"primary\" />} px=\"0\">\n          {TranslateString(438, 'Close')}\n        </Button>\n      </Flex>\n      <Text color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\">\n        {TranslateString(999, 'Filter')}\n      </Text>\n      <Flex alignItems=\"center\">\n        <Filter>\n          <Radio\n            scale=\"sm\"\n            checked={historyFilter === HistoryFilter.ALL}\n            disabled={isFetchingHistory || !account}\n            onChange={handleChange(HistoryFilter.ALL)}\n          />\n          <Text ml=\"4px\">{TranslateString(999, 'All')}</Text>\n        </Filter>\n        <Filter>\n          <Radio\n            scale=\"sm\"\n            checked={historyFilter === HistoryFilter.COLLECTED}\n            disabled={isFetchingHistory || !account}\n            onChange={handleChange(HistoryFilter.COLLECTED)}\n          />\n          <Text ml=\"4px\">{TranslateString(999, 'Collected')}</Text>\n        </Filter>\n        <Filter>\n          <Radio\n            scale=\"sm\"\n            checked={historyFilter === HistoryFilter.UNCOLLECTED}\n            disabled={isFetchingHistory || !account}\n            onChange={handleChange(HistoryFilter.UNCOLLECTED)}\n          />\n          <Text ml=\"4px\">{TranslateString(999, 'Uncollected')}</Text>\n        </Filter>\n      </Flex>\n    </StyledHeader>\n  )\n}\n\nexport default Header\n","import React, { useEffect } from 'react'\nimport { Box, Heading, Spinner, Text } from '@pancakeswap-libs/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport { fetchHistory } from 'state/predictions'\nimport { HistoryFilter } from 'state/types'\nimport useI18n from 'hooks/useI18n'\nimport { orderBy } from 'lodash'\nimport { useAppDispatch } from 'state'\nimport {\n  useGetCurrentEpoch,\n  useGetHistoryByAccount,\n  useGetHistoryFilter,\n  useGetIsFetchingHistory,\n  useIsHistoryPaneOpen,\n} from 'state/hooks'\nimport { Header, HistoricalBet } from './components/History'\n\nconst StyledHistory = styled.div`\n  background-color: ${({ theme }) => theme.card.background};\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`\n\nconst BetWrapper = styled.div`\n  flex: 1;\n  height: 100%;\n  overflow-y: auto;\n  position: relative;\n`\n\nconst SpinnerWrapper = styled.div`\n  align-items: center;\n  background-color: ${({ theme }) => theme.card.background};\n  display: flex;\n  left: 0;\n  height: 100%;\n  justify-content: center;\n  position: absolute;\n  top: 0;\n  width: 100%;\n`\n\nconst History = () => {\n  const TranslateString = useI18n()\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\n  const isFetchingHistory = useGetIsFetchingHistory()\n  const historyFilter = useGetHistoryFilter()\n  const currentEpoch = useGetCurrentEpoch()\n  const bets = useGetHistoryByAccount(account)\n\n  useEffect(() => {\n    if (account && isHistoryPaneOpen) {\n      dispatch(fetchHistory({ account }))\n    }\n  }, [account, currentEpoch, isHistoryPaneOpen, dispatch])\n\n  // Currently the api cannot filter by unclaimed AND won so we do it here\n  // when the user has selected Uncollected only include positions they won\n  const results =\n    historyFilter === HistoryFilter.UNCOLLECTED\n      ? bets.filter((bet) => {\n          return bet.position === bet.round.position || bet.round.failed === true\n        })\n      : bets\n\n  return (\n    <StyledHistory>\n      <Header />\n      <BetWrapper>\n        {isFetchingHistory && (\n          <SpinnerWrapper>\n            <Spinner size={72} />\n          </SpinnerWrapper>\n        )}\n\n        {results && results.length > 0 ? (\n          orderBy(results, ['round.epoch'], ['desc']).map((bet) => {\n            return <HistoricalBet key={bet.id} bet={bet} />\n          })\n        ) : (\n          <Box p=\"24px\">\n            <Heading size=\"lg\" textAlign=\"center\" mb=\"8px\">\n              {TranslateString(999, 'No predictions history available')}\n            </Heading>\n            <Text as=\"p\" textAlign=\"center\">\n              {TranslateString(\n                999,\n                'If you are sure you should see history here, make sure you’re connected to the correct wallet and try again.',\n              )}\n            </Text>\n          </Box>\n        )}\n      </BetWrapper>\n    </StyledHistory>\n  )\n}\n\nexport default History\n","import React from 'react'\nimport { useTheme } from 'styled-components'\nimport { Svg, SvgProps } from '@pancakeswap-libs/uikit'\n\ninterface MultiplierProps extends SvgProps {\n  isActive: boolean\n}\n\nexport const RoundMultiplierDownArrow: React.FC<MultiplierProps> = ({ isActive, ...props }) => {\n  const theme = useTheme()\n  const fill = theme.colors[isActive ? 'failure' : 'tertiary']\n\n  return (\n    <Svg height=\"65px\" width=\"240px\" viewBox=\"0 0 240 65\" {...props}>\n      <g filter=\"url(#filter0_i)\">\n        <path\n          d=\"M10.0001 15.7243L10.0003 1H234L234 15.7247C234 22.4864 229.749 28.5181 223.381 30.7923L138.48 61.1141C127.823 64.9203 116.177 64.9203 105.519 61.1141L20.6188 30.7924C14.2508 28.5181 10.0001 22.4862 10.0001 15.7243Z\"\n          fill={fill}\n        />\n      </g>\n      <defs>\n        <filter\n          id=\"filter0_i\"\n          x=\"10.0001\"\n          y=\"1\"\n          width=\"224\"\n          height=\"62.9688\"\n          filterUnits=\"userSpaceOnUse\"\n          colorInterpolationFilters=\"sRGB\"\n        >\n          <feFlood floodOpacity=\"0\" result=\"BackgroundImageFix\" />\n          <feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\" />\n          <feColorMatrix\n            in=\"SourceAlpha\"\n            type=\"matrix\"\n            values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n            result=\"hardAlpha\"\n          />\n          <feOffset />\n          <feGaussianBlur stdDeviation=\"1\" />\n          <feComposite in2=\"hardAlpha\" operator=\"arithmetic\" k2=\"-1\" k3=\"1\" />\n          <feColorMatrix type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0\" />\n          <feBlend mode=\"normal\" in2=\"shape\" result=\"effect1_innerShadow\" />\n        </filter>\n      </defs>\n    </Svg>\n  )\n}\n\nexport const RoundMultiplierUpArrow: React.FC<MultiplierProps> = ({ isActive, ...props }) => {\n  const theme = useTheme()\n  const fill = theme.colors[isActive ? 'success' : 'tertiary']\n\n  return (\n    <Svg height=\"65px\" width=\"240px\" viewBox=\"0 0 240 65\" {...props}>\n      <g filter=\"url(#filter0_i)\">\n        <path\n          d=\"M10.0001 49.2757L10.0003 64H234L234 49.2753C234 42.5136 229.749 36.4819 223.381 34.2077L138.48 3.8859C127.823 0.0796983 116.177 0.0796931 105.519 3.8859L20.6188 34.2076C14.2508 36.4819 10.0001 42.5138 10.0001 49.2757Z\"\n          fill={fill}\n        />\n      </g>\n      <defs>\n        <filter\n          id=\"filter0_i\"\n          x=\"10.0001\"\n          y=\"1.03125\"\n          width=\"224\"\n          height=\"62.9688\"\n          filterUnits=\"userSpaceOnUse\"\n          colorInterpolationFilters=\"sRGB\"\n        >\n          <feFlood floodOpacity=\"0\" result=\"BackgroundImageFix\" />\n          <feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\" />\n          <feColorMatrix\n            in=\"SourceAlpha\"\n            type=\"matrix\"\n            values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n            result=\"hardAlpha\"\n          />\n          <feOffset />\n          <feGaussianBlur stdDeviation=\"1\" />\n          <feComposite in2=\"hardAlpha\" operator=\"arithmetic\" k2=\"-1\" k3=\"1\" />\n          <feColorMatrix type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0\" />\n          <feBlend mode=\"normal\" in2=\"shape\" result=\"effect1_innerShadow\" />\n        </filter>\n      </defs>\n    </Svg>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { CheckmarkCircleIcon, Tag, useTooltip } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { formatBnb } from '../../helpers'\n\ninterface EnteredTagProps {\n  amount?: number\n}\n\nconst StyledEnteredTag = styled(Tag).attrs({\n  variant: 'secondary',\n  startIcon: <CheckmarkCircleIcon width=\"18px\" />,\n})`\n  font-weight: bold;\n  text-transform: uppercase;\n`\n\nconst EnteredTag: React.FC<EnteredTagProps> = ({ amount }) => {\n  const TranslateString = useI18n()\n  const { targetRef, tooltipVisible, tooltip } = useTooltip(\n    <div style={{ whiteSpace: 'nowrap' }}>{`${formatBnb(amount)} BNB`}</div>,\n    'bottom',\n    'hover',\n  )\n\n  return (\n    <>\n      <span ref={targetRef}>\n        <StyledEnteredTag>{TranslateString(999, 'Entered')}</StyledEnteredTag>{' '}\n      </span>{' '}\n      {tooltipVisible && tooltip}\n    </>\n  )\n}\n\nexport default EnteredTag\n","import React from 'react'\nimport styled, { CSSProperties } from 'styled-components'\nimport { Box, Flex, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { BetPosition } from 'state/types'\nimport { RoundMultiplierDownArrow, RoundMultiplierUpArrow } from '../../RoundMultiplierArrows'\nimport EnteredTag from './EnteredTag'\n\ninterface MultiplierArrowProps {\n  amount?: number\n  multiplier?: number\n  hasEntered?: boolean\n  betPosition?: BetPosition\n  isDisabled?: boolean\n  isActive?: boolean\n}\n\nconst ArrowWrapper = styled.div`\n  height: 65px;\n  margin: 0 auto;\n  width: 240px;\n`\n\nconst Content = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  left: 0;\n  height: 100%;\n  justify-content: center;\n  position: absolute;\n  top: 0;\n  width: 100%;\n`\n\nconst EnteredTagWrapper = styled.div`\n  position: absolute;\n  z-index: 10;\n`\n\nconst getTextColor = (fallback = 'textSubtle') => (isActive: boolean, isDisabled: boolean) => {\n  if (isDisabled) {\n    return 'textDisabled'\n  }\n\n  if (isActive) {\n    return 'white'\n  }\n\n  return fallback\n}\n\nconst MultiplierArrow: React.FC<MultiplierArrowProps> = ({\n  amount,\n  multiplier,\n  hasEntered = false,\n  betPosition = BetPosition.BULL,\n  isDisabled = false,\n  isActive = false,\n}) => {\n  const TranslateString = useI18n()\n  const upColor = getTextColor('success')(isActive, isDisabled)\n  const downColor = getTextColor('failure')(isActive, isDisabled)\n  const textColor = getTextColor()(isActive, isDisabled)\n  const multiplierText = (\n    <Flex>\n      <Text color={textColor} bold lineHeight=\"21px\">\n        {multiplier !== undefined ? `${multiplier.toLocaleString(undefined, { maximumFractionDigits: 2 })}x` : '-'}\n      </Text>\n      <Text color={textColor} lineHeight=\"21px\" ml=\"4px\">\n        {TranslateString(999, 'Payout')}\n      </Text>\n    </Flex>\n  )\n\n  const getEnteredTag = (position: CSSProperties) => {\n    if (!hasEntered) {\n      return null\n    }\n\n    return (\n      <EnteredTagWrapper style={position}>\n        <EnteredTag amount={amount} />\n      </EnteredTagWrapper>\n    )\n  }\n\n  if (betPosition === BetPosition.BEAR) {\n    return (\n      <Box position=\"relative\">\n        <ArrowWrapper>\n          <RoundMultiplierDownArrow isActive={isActive} />\n          {getEnteredTag({ bottom: 0, right: 0 })}\n          <Content>\n            {multiplierText}\n            <Text bold fontSize=\"24px\" lineHeight=\"26px\" mb=\"8px\" color={downColor} textTransform=\"uppercase\">\n              {TranslateString(999, 'Down')}\n            </Text>\n          </Content>\n        </ArrowWrapper>\n      </Box>\n    )\n  }\n\n  return (\n    <Box position=\"relative\">\n      <ArrowWrapper>\n        <RoundMultiplierUpArrow isActive={isActive} />\n        {getEnteredTag({ top: 0, left: 0 })}\n        <Content>\n          <Text bold fontSize=\"24px\" lineHeight=\"26px\" color={upColor} textTransform=\"uppercase\">\n            {TranslateString(999, 'Up')}\n          </Text>\n          {multiplierText}\n        </Content>\n      </ArrowWrapper>\n    </Box>\n  )\n}\n\nexport default MultiplierArrow\n","import styled from 'styled-components'\nimport { Card as UIKitCard } from '@pancakeswap-libs/uikit'\n\nconst Card = styled(UIKitCard)`\n  border-radius: 16px;\n`\n\nexport default Card\n","import React, { ReactElement } from 'react'\nimport { Flex, Text } from '@pancakeswap-libs/uikit'\nimport styled from 'styled-components'\n\ntype Status = 'expired' | 'live' | 'next' | 'soon' | 'canceled'\n\ninterface CardHeaderProps {\n  status: Status\n  title: string\n  epoch: number\n  blockNumber: number\n  icon?: ReactElement\n}\n\nconst getBackgroundColor = (status: Status) => {\n  switch (status) {\n    case 'live':\n      return 'transparent'\n    case 'canceled':\n      return 'warning'\n    case 'next':\n      return 'secondary'\n    case 'expired':\n    case 'soon':\n    default:\n      return 'borderColor'\n  }\n}\n\ntype TextColor = 'textDisabled' | 'white' | 'secondary' | 'text' | 'textSubtle'\ntype FallbackColor = 'text' | 'textSubtle'\n\nconst getTextColorByStatus = (status: Status, fallback: FallbackColor): TextColor => {\n  switch (status) {\n    case 'expired':\n      return 'textDisabled'\n    case 'next':\n      return 'white'\n    case 'live':\n      return 'secondary'\n    case 'canceled':\n      return 'text'\n    default:\n      return fallback\n  }\n}\n\nconst StyledCardHeader = styled.div<{ status: Status }>`\n  align-items: center;\n  background-color: ${({ theme, status }) => theme.colors[getBackgroundColor(status)]};\n  border-radius: 16px 16px 0 0;\n  display: grid;\n  grid-template-columns: 1fr 40px 1fr;\n  padding: ${({ status }) => (status === 'live' ? '16px' : '8px')};\n`\n\nconst Round = styled.div`\n  justify-self: center;\n`\n\nconst CardHeader: React.FC<CardHeaderProps> = ({ status, title, epoch, icon }) => {\n  const textColor = getTextColorByStatus(status, 'text')\n  const isLive = status === 'live'\n\n  return (\n    <StyledCardHeader status={status}>\n      <Flex alignItems=\"center\">\n        {icon}\n        <Text color={textColor} bold={isLive} textTransform={isLive ? 'uppercase' : 'capitalize'} lineHeight=\"21px\">\n          {title}\n        </Text>\n      </Flex>\n      <Round>\n        <Text fontSize={isLive ? '14px' : '12px'} color={getTextColorByStatus(status, 'textSubtle')} textAlign=\"center\">\n          {`#${epoch}`}\n        </Text>\n      </Round>\n    </StyledCardHeader>\n  )\n}\n\nexport default CardHeader\n","import React, { useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport { Flex, TrophyGoldIcon } from '@pancakeswap-libs/uikit'\nimport { useAppDispatch } from 'state'\nimport { useGetCurrentEpoch } from 'state/hooks'\nimport { getBetHistory, transformBetResponse } from 'state/predictions/helpers'\nimport { markBetAsCollected } from 'state/predictions'\nimport useI18n from 'hooks/useI18n'\nimport CollectWinningsButton from '../CollectWinningsButton'\nimport { getPayout } from '../../helpers'\n\ninterface CollectWinningsOverlayProps {\n  roundId: string\n  hasEntered: boolean\n  isBottom?: boolean\n}\n\nconst Wrapper = styled(Flex)<{ isBottom: CollectWinningsOverlayProps['isBottom'] }>`\n  background-color: ${({ theme }) => theme.colors.secondary};\n  left: 0;\n  position: absolute;\n  width: 100%;\n  z-index: 30;\n\n  ${({ isBottom }) => {\n    return isBottom\n      ? `\n      border-radius: 0 0 16px 16px;\n      bottom: 0;\n    `\n      : `\n      top: 0;\n    `\n  }}\n`\n\nconst CollectWinningsOverlay: React.FC<CollectWinningsOverlayProps> = ({\n  roundId,\n  hasEntered,\n  isBottom = false,\n  ...props\n}) => {\n  const [state, setState] = useState<{ betId: string; epoch: number; payout: number }>({\n    betId: null,\n    epoch: null,\n    payout: 0,\n  })\n  const { account } = useWeb3React()\n  const TranslateString = useI18n()\n  const dispatch = useAppDispatch()\n  const currentEpoch = useGetCurrentEpoch()\n\n  // Check if the wallet can collect the bet\n  // We do it here because it is not gaurenteed the bet info will be in the history\n  useEffect(() => {\n    const fetchBet = async () => {\n      const bets = await getBetHistory({ user: account.toLowerCase(), round: roundId, claimed: false })\n\n      if (bets.length === 1) {\n        const [firstBetResponse] = bets\n        const bet = transformBetResponse(firstBetResponse)\n\n        if (bet.position === bet.round.position) {\n          setState({\n            betId: bet.id,\n            epoch: bet.round.epoch,\n            payout: getPayout(bet),\n          })\n        }\n      }\n    }\n\n    if (account && hasEntered) {\n      fetchBet()\n    }\n  }, [account, roundId, hasEntered, currentEpoch, setState])\n\n  if (!state.epoch) {\n    return null\n  }\n\n  const handleSuccess = async () => {\n    dispatch(markBetAsCollected({ betId: state.betId, account }))\n    setState({ betId: null, epoch: null, payout: 0 })\n  }\n\n  return (\n    <Wrapper alignItems=\"center\" p=\"16px\" isBottom={isBottom} {...props}>\n      <TrophyGoldIcon width=\"64px\" style={{ flex: 'none' }} mr=\"8px\" />\n      <CollectWinningsButton\n        payout={state.payout}\n        epoch={state.epoch}\n        hasClaimed={false}\n        width=\"100%\"\n        onSuccess={handleSuccess}\n      >\n        {TranslateString(556, 'Collect Winnings')}\n      </CollectWinningsButton>\n    </Wrapper>\n  )\n}\n\nexport default CollectWinningsOverlay\n","import React from 'react'\nimport { CardBody, Text, Flex, BlockIcon, LinkExternal } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { Round, BetPosition } from 'state/types'\nimport { useGetTotalIntervalBlocks } from 'state/hooks'\nimport ReclaimPositionButton from '../ReclaimPositionButton'\nimport useIsRefundable from '../../hooks/useIsRefundable'\nimport { RoundResultBox } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport Card from './Card'\nimport CardHeader from './CardHeader'\n\ninterface CanceledRoundCardProps {\n  round: Round\n}\n\nconst CanceledRoundCard: React.FC<CanceledRoundCardProps> = ({ round }) => {\n  const TranslateString = useI18n()\n  const interval = useGetTotalIntervalBlocks()\n  const { isRefundable, setIsRefundable } = useIsRefundable(round.epoch)\n  const { epoch, startBlock } = round\n  const estimatedEndBlock = startBlock + interval\n\n  const handleSuccess = async () => {\n    setIsRefundable(false)\n  }\n\n  return (\n    <Card>\n      <CardHeader\n        status=\"canceled\"\n        icon={<BlockIcon mr=\"4px\" width=\"21px\" />}\n        title={TranslateString(999, 'Canceled')}\n        epoch={round.epoch}\n        blockNumber={estimatedEndBlock}\n      />\n      <CardBody p=\"16px\">\n        <MultiplierArrow isDisabled />\n        <RoundResultBox>\n          <Flex flexDirection=\"column\" alignItems=\"center\">\n            <Text bold color={isRefundable ? 'text' : 'textDisabled'}>\n              {TranslateString(999, 'Round Canceled')}\n            </Text>\n            {isRefundable && <ReclaimPositionButton epoch={epoch} onSuccess={handleSuccess} width=\"100%\" my=\"8px\" />}\n            <LinkExternal href=\"https://docs.pancakeswap.finance/products/prediction\" external>\n              {TranslateString(999, 'Learn More')}\n            </LinkExternal>\n          </Flex>\n        </RoundResultBox>\n        <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default CanceledRoundCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { BlockIcon, CardBody } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { Round, BetPosition } from 'state/types'\nimport { RoundResult } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport Card from './Card'\nimport CardHeader from './CardHeader'\nimport CollectWinningsOverlay from './CollectWinningsOverlay'\nimport CanceledRoundCard from './CanceledRoundCard'\n\ninterface ExpiredRoundCardProps {\n  round: Round\n  betAmount?: number\n  hasEnteredUp: boolean\n  hasEnteredDown: boolean\n  bullMultiplier: number\n  bearMultiplier: number\n}\n\nconst StyledExpiredRoundCard = styled(Card)`\n  opacity: 0.7;\n  transition: opacity 300ms;\n\n  &:hover {\n    opacity: 1;\n  }\n`\n\nconst ExpiredRoundCard: React.FC<ExpiredRoundCardProps> = ({\n  round,\n  betAmount,\n  hasEnteredUp,\n  hasEnteredDown,\n  bullMultiplier,\n  bearMultiplier,\n}) => {\n  const TranslateString = useI18n()\n  const { id, endBlock, lockPrice, closePrice } = round\n  const betPosition = closePrice > lockPrice ? BetPosition.BULL : BetPosition.BEAR\n  const hasEntered = hasEnteredUp || hasEnteredDown\n\n  if (round.failed) {\n    return <CanceledRoundCard round={round} />\n  }\n\n  return (\n    <StyledExpiredRoundCard>\n      <CardHeader\n        status=\"expired\"\n        icon={<BlockIcon mr=\"4px\" width=\"21px\" color=\"textDisabled\" />}\n        title={TranslateString(999, 'Expired')}\n        blockNumber={endBlock}\n        epoch={round.epoch}\n      />\n      <CardBody p=\"16px\" style={{ position: 'relative' }}>\n        <CollectWinningsOverlay roundId={id} hasEntered={hasEntered} isBottom={hasEnteredDown} />\n        <MultiplierArrow\n          amount={betAmount}\n          multiplier={bullMultiplier}\n          isActive={betPosition === BetPosition.BULL}\n          hasEntered={hasEnteredUp}\n        />\n        <RoundResult round={round} />\n        <MultiplierArrow\n          amount={betAmount}\n          multiplier={bearMultiplier}\n          betPosition={BetPosition.BEAR}\n          isActive={betPosition === BetPosition.BEAR}\n          hasEntered={hasEnteredDown}\n        />\n      </CardBody>\n    </StyledExpiredRoundCard>\n  )\n}\n\nexport default ExpiredRoundCard\n","import React from 'react'\nimport { Progress, ProgressProps } from '@pancakeswap-libs/uikit'\nimport { useBlock } from 'state/hooks'\n\ninterface BlockProgressProps extends ProgressProps {\n  startBlock: number\n  endBlock: number\n}\n\nconst BlockProgress: React.FC<BlockProgressProps> = ({ startBlock, endBlock, ...props }) => {\n  const { currentBlock } = useBlock()\n  const rawProgress = ((currentBlock - startBlock) / (endBlock - startBlock)) * 100\n  const progress = rawProgress <= 100 ? rawProgress : 100\n\n  return <Progress primaryStep={progress} {...props} />\n}\n\nexport default BlockProgress\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box, CardBody, Flex, LinkExternal, PlayCircleOutlineIcon, Text, useTooltip } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { Round, BetPosition } from 'state/types'\nimport { useGetBufferBlocks, useGetIntervalBlocks } from 'state/hooks'\nimport { useBnbUsdtTicker } from 'hooks/ticker'\nimport BlockProgress from 'components/BlockProgress'\nimport { formatUsd, getBubbleGumBackground } from '../../helpers'\nimport PositionTag from '../PositionTag'\nimport { RoundResultBox, LockPriceRow, PrizePoolRow } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport Card from './Card'\nimport CardHeader from './CardHeader'\nimport CanceledRoundCard from './CanceledRoundCard'\n\ninterface LiveRoundCardProps {\n  round: Round\n  betAmount?: number\n  hasEnteredUp: boolean\n  hasEnteredDown: boolean\n  bullMultiplier: number\n  bearMultiplier: number\n}\n\nconst GradientBorder = styled.div`\n  background: linear-gradient(180deg, #53dee9 0%, #7645d9 100%);\n  border-radius: 16px;\n  padding: 1px;\n`\n\nconst GradientCard = styled(Card)`\n  background: ${({ theme }) => getBubbleGumBackground(theme)};\n`\n\nconst LiveRoundCard: React.FC<LiveRoundCardProps> = ({\n  round,\n  betAmount,\n  hasEnteredUp,\n  hasEnteredDown,\n  bullMultiplier,\n  bearMultiplier,\n}) => {\n  const TranslateString = useI18n()\n  const { lockPrice, lockBlock, totalAmount } = round\n  const { stream } = useBnbUsdtTicker()\n  const totalInterval = useGetIntervalBlocks()\n  const bufferBlocks = useGetBufferBlocks()\n  const isBull = stream?.lastPrice > lockPrice\n  const priceColor = isBull ? 'success' : 'failure'\n  const estimatedEndBlock = lockBlock + totalInterval + bufferBlocks / 2\n  const priceDifference = stream?.lastPrice - lockPrice\n\n  const tooltipContent = (\n    <Box width=\"256px\">\n      {TranslateString(\n        999,\n        'The final price at the end of a round may be different from the price shown on the live feed.',\n      )}\n      <LinkExternal href=\"https://docs.pancakeswap.finance/products/prediction\" mt=\"8px\">\n        {TranslateString(999, 'Learn More')}\n      </LinkExternal>\n    </Box>\n  )\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, 'bottom')\n\n  if (round.failed) {\n    return <CanceledRoundCard round={round} />\n  }\n\n  return (\n    <GradientBorder>\n      <GradientCard>\n        <CardHeader\n          status=\"live\"\n          icon={<PlayCircleOutlineIcon mr=\"4px\" width=\"24px\" color=\"secondary\" />}\n          title={TranslateString(1198, 'Live')}\n          epoch={round.epoch}\n          blockNumber={estimatedEndBlock}\n        />\n        <BlockProgress variant=\"flat\" scale=\"sm\" startBlock={lockBlock} endBlock={estimatedEndBlock} />\n        <CardBody p=\"16px\">\n          <MultiplierArrow amount={betAmount} multiplier={bullMultiplier} hasEntered={hasEnteredUp} isActive={isBull} />\n          <RoundResultBox betPosition={isBull ? BetPosition.BULL : BetPosition.BEAR}>\n            <Text color=\"textSubtle\" fontSize=\"12px\" bold textTransform=\"uppercase\" mb=\"8px\">\n              {TranslateString(999, 'Last Price')}\n            </Text>\n            <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\" height=\"36px\">\n              {stream && (\n                <>\n                  <div ref={targetRef}>\n                    <Text bold color={priceColor} fontSize=\"24px\" style={{ minHeight: '36px' }}>\n                      {formatUsd(stream.lastPrice)}\n                    </Text>\n                  </div>\n                  <PositionTag betPosition={isBull ? BetPosition.BULL : BetPosition.BEAR}>\n                    {formatUsd(priceDifference)}\n                  </PositionTag>\n                </>\n              )}\n            </Flex>\n            {lockPrice && <LockPriceRow lockPrice={lockPrice} />}\n            <PrizePoolRow totalAmount={totalAmount} />\n          </RoundResultBox>\n          <MultiplierArrow\n            amount={betAmount}\n            multiplier={bearMultiplier}\n            betPosition={BetPosition.BEAR}\n            hasEntered={hasEnteredDown}\n            isActive={!isBull}\n          />\n        </CardBody>\n      </GradientCard>\n      {tooltipVisible && tooltip}\n    </GradientBorder>\n  )\n}\n\nexport default LiveRoundCard\n","import React, { ReactNode } from 'react'\nimport styled from 'styled-components'\n\ninterface CardFlipProps {\n  isFlipped: boolean\n  height: string\n  children: [ReactNode, ReactNode]\n}\n\nconst Front = styled.div`\n  align-items: center;\n  backface-visibility: hidden;\n  display: flex;\n  height: 100%;\n  left: 0;\n  position: absolute;\n  top: 0;\n  transition: z-index 600ms;\n  width: 100%;\n\n  & > div {\n    flex: 1;\n  }\n`\n\nconst Back = styled(Front)`\n  transform: rotateY(180deg);\n`\n\nconst Inner = styled.div<{ isFlipped: CardFlipProps['isFlipped'] }>`\n  height: 100%;\n  position: relative;\n  transform: rotateY(${({ isFlipped }) => (isFlipped ? 180 : 0)}deg);\n  transform-style: preserve-3d;\n  transition: transform 600ms;\n\n  ${Front} {\n    z-index: ${({ isFlipped }) => (isFlipped ? 5 : 10)};\n  }\n\n  ${Back} {\n    z-index: ${({ isFlipped }) => (isFlipped ? 10 : 5)};\n  }\n`\n\nconst StyledCardFlip = styled.div`\n  perspective: 1000px;\n  z-index: auto;\n`\n\nconst getComponents = (children: CardFlipProps['children']) => {\n  if (children.length !== 2) {\n    throw new Error('CardFlip: Two children are required')\n  }\n\n  return children\n}\n\nconst CardFlip: React.FC<CardFlipProps> = ({ isFlipped, height, children }) => {\n  const [front, back] = getComponents(children)\n\n  return (\n    <StyledCardFlip style={{ height }}>\n      <Inner isFlipped={isFlipped}>\n        <Front>{front}</Front>\n        <Back>{back}</Back>\n      </Inner>\n    </StyledCardFlip>\n  )\n}\n\nexport default CardFlip\n","import { useContext } from 'react'\nimport { SwiperContext } from '../context/SwiperProvider'\n\nconst useSwiper = () => {\n  const swiperContext = useContext(SwiperContext)\n\n  if (swiperContext === undefined) {\n    throw new Error('Swiper not found')\n  }\n\n  return swiperContext\n}\n\nexport default useSwiper\n","import styled from 'styled-components'\nimport { Flex } from '@pancakeswap-libs/uikit'\n\nconst FlexRow = styled(Flex).attrs({ alignItems: 'center' })`\n  flex: 1;\n`\n\nexport default FlexRow\n","import React, { ChangeEventHandler, useEffect, useState } from 'react'\nimport {\n  ArrowBackIcon,\n  CardBody,\n  CardHeader,\n  Flex,\n  Heading,\n  IconButton,\n  Button,\n  BinanceIcon,\n  Text,\n  BalanceInput,\n  Slider,\n  Box,\n  AutoRenewIcon,\n} from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js'\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\nimport { useWeb3React } from '@web3-react/core'\nimport { useGetMinBetAmount } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport { usePredictionsContract } from 'hooks/useContract'\nimport { useGetBnbBalance } from 'hooks/useTokenBalance'\nimport useToast from 'hooks/useToast'\nimport { BetPosition } from 'state/types'\nimport { getDecimalAmount } from 'utils/formatBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport PositionTag from '../PositionTag'\nimport { getBnbAmount } from '../../helpers'\nimport useSwiper from '../../hooks/useSwiper'\nimport FlexRow from '../FlexRow'\nimport Card from './Card'\n\ninterface SetPositionCardProps {\n  position: BetPosition\n  togglePosition: () => void\n  onBack: () => void\n  onSuccess: (decimalValue: BigNumber, hash: string) => Promise<void>\n}\n\nconst dust = new BigNumber(0.01).times(DEFAULT_TOKEN_DECIMAL)\nconst percentShortcuts = [10, 25, 50, 75]\n\nconst getPercentDisplay = (percentage: number) => {\n  if (Number.isNaN(percentage)) {\n    return ''\n  }\n\n  if (percentage > 100) {\n    return ''\n  }\n\n  if (percentage < 0) {\n    return ''\n  }\n\n  return `${percentage.toLocaleString(undefined, { maximumFractionDigits: 1 })}%`\n}\n\nconst getButtonProps = (value: BigNumber, bnbBalance: BigNumber, minBetAmountBalance: number) => {\n  if (bnbBalance.eq(0)) {\n    return { id: 999, fallback: 'Insufficient BNB balance', disabled: true }\n  }\n\n  if (value.eq(0) || value.isNaN()) {\n    return { id: 999, fallback: 'Enter an amount', disabled: true }\n  }\n  return { id: 464, fallback: 'Confirm', disabled: value.lt(minBetAmountBalance) }\n}\n\nconst SetPositionCard: React.FC<SetPositionCardProps> = ({ position, togglePosition, onBack, onSuccess }) => {\n  const [value, setValue] = useState('')\n  const [isTxPending, setIsTxPending] = useState(false)\n  const [errorMessage, setErrorMessage] = useState(null)\n  const { account } = useWeb3React()\n  const { swiper } = useSwiper()\n  const { balance: bnbBalance } = useGetBnbBalance()\n  const minBetAmount = useGetMinBetAmount()\n  const TranslateString = useI18n()\n  const { toastError } = useToast()\n  const predictionsContract = usePredictionsContract()\n\n  const balanceDisplay = getBnbAmount(bnbBalance).toNumber()\n  const maxBalance = getBnbAmount(bnbBalance.minus(dust)).toNumber()\n  const valueAsBn = new BigNumber(value)\n\n  const percentageOfMaxBalance = valueAsBn.div(maxBalance).times(100).toNumber()\n  const percentageDisplay = getPercentDisplay(percentageOfMaxBalance)\n  const showFieldWarning = account && valueAsBn.gt(0) && errorMessage !== null\n  const minBetAmountBalance = getBnbAmount(minBetAmount).toNumber()\n\n  const handleChange: ChangeEventHandler<HTMLInputElement> = (evt) => {\n    const newValue = evt.target.value\n    setValue(newValue)\n  }\n\n  const handleSliderChange = (newValue: number) => {\n    setValue(newValue.toString())\n  }\n\n  const setMax = () => {\n    setValue(maxBalance.toString())\n  }\n\n  // Clear value\n  const handleGoBack = () => {\n    setValue('')\n    onBack()\n  }\n\n  // Disable the swiper events to avoid conflicts\n  const handleMouseOver = () => {\n    swiper.keyboard.disable()\n    swiper.mousewheel.disable()\n    swiper.detachEvents()\n  }\n\n  const handleMouseOut = () => {\n    swiper.keyboard.enable()\n    swiper.mousewheel.enable()\n    swiper.attachEvents()\n  }\n\n  const { id, fallback, disabled } = getButtonProps(valueAsBn, bnbBalance, minBetAmountBalance)\n\n  const handleEnterPosition = () => {\n    const betMethod = position === BetPosition.BULL ? 'betBull' : 'betBear'\n    const decimalValue = getDecimalAmount(valueAsBn)\n\n    predictionsContract.methods[betMethod]()\n      .send({ from: account, value: decimalValue })\n      .once('sending', () => {\n        setIsTxPending(true)\n      })\n      .once('receipt', async (result) => {\n        setIsTxPending(false)\n        onSuccess(decimalValue, result.transactionHash as string)\n      })\n      .once('error', (error) => {\n        const errorMsg = TranslateString(999, 'An error occurred, unable to enter your position')\n\n        toastError('Error!', error?.message)\n        setIsTxPending(false)\n        console.error(errorMsg, error)\n      })\n  }\n\n  // Warnings\n  useEffect(() => {\n    const bnValue = new BigNumber(value)\n    const hasSufficientBalance = bnValue.gt(0) && bnValue.lte(maxBalance)\n\n    if (!hasSufficientBalance) {\n      setErrorMessage({ id: 999, fallback: 'Insufficient BNB balance' })\n    } else if (bnValue.gt(0) && bnValue.lt(minBetAmountBalance)) {\n      setErrorMessage({\n        id: 999,\n        fallback: `A minimum amount of ${minBetAmountBalance} BNB is required`,\n        data: { num: minBetAmountBalance, token: 'BNB' },\n      })\n    } else {\n      setErrorMessage(null)\n    }\n  }, [value, maxBalance, minBetAmountBalance, setErrorMessage])\n\n  return (\n    <Card onMouseOver={handleMouseOver} onMouseOut={handleMouseOut}>\n      <CardHeader p=\"16px\">\n        <Flex alignItems=\"center\">\n          <IconButton variant=\"text\" scale=\"sm\" onClick={handleGoBack} mr=\"8px\">\n            <ArrowBackIcon width=\"24px\" />\n          </IconButton>\n          <FlexRow>\n            <Heading size=\"md\">{TranslateString(999, 'Set Position')}</Heading>\n          </FlexRow>\n          <PositionTag betPosition={position} onClick={togglePosition}>\n            {position === BetPosition.BULL ? TranslateString(999, 'Up') : TranslateString(999, 'Down')}\n          </PositionTag>\n        </Flex>\n      </CardHeader>\n      <CardBody py=\"16px\">\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n          <Text textAlign=\"right\" color=\"textSubtle\">\n            {TranslateString(999, 'Commit')}:\n          </Text>\n          <Flex alignItems=\"center\">\n            <BinanceIcon mr=\"4px  \" />\n            <Text bold textTransform=\"uppercase\">\n              BNB\n            </Text>\n          </Flex>\n        </Flex>\n        <BalanceInput\n          value={value}\n          onChange={handleChange}\n          isWarning={showFieldWarning}\n          inputProps={{ disabled: !account || isTxPending }}\n        />\n        {showFieldWarning && (\n          <Text color=\"failure\" fontSize=\"12px\" mt=\"4px\" textAlign=\"right\">\n            {TranslateString(errorMessage.id, errorMessage.fallback, errorMessage.data)}\n          </Text>\n        )}\n        <Text textAlign=\"right\" mb=\"16px\" color=\"textSubtle\" fontSize=\"12px\" style={{ height: '18px' }}>\n          {account && TranslateString(999, `Balance: ${balanceDisplay}`, { num: balanceDisplay })}\n        </Text>\n        <Slider\n          name=\"balance\"\n          min={0}\n          max={maxBalance}\n          value={valueAsBn.lte(maxBalance) ? valueAsBn.toNumber() : 0}\n          onValueChanged={handleSliderChange}\n          step={0.000000000000001}\n          valueLabel={account ? percentageDisplay : ''}\n          disabled={!account || isTxPending}\n          mb=\"4px\"\n        />\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n          {percentShortcuts.map((percent) => {\n            const handleClick = () => {\n              setValue(((percent / 100) * maxBalance).toString())\n            }\n\n            return (\n              <Button\n                key={percent}\n                scale=\"xs\"\n                variant=\"tertiary\"\n                onClick={handleClick}\n                disabled={!account || isTxPending}\n                style={{ flex: 1 }}\n              >\n                {`${percent}%`}\n              </Button>\n            )\n          })}\n          <Button scale=\"xs\" variant=\"tertiary\" onClick={setMax} disabled={!account || isTxPending}>\n            {TranslateString(452, 'Max')}\n          </Button>\n        </Flex>\n        <Box mb=\"8px\">\n          {account ? (\n            <Button\n              width=\"100%\"\n              disabled={!account || disabled}\n              onClick={handleEnterPosition}\n              isLoading={isTxPending}\n              endIcon={isTxPending ? <AutoRenewIcon color=\"currentColor\" spin /> : null}\n            >\n              {TranslateString(id, fallback)}\n            </Button>\n          ) : (\n            <UnlockButton width=\"100%\" />\n          )}\n        </Box>\n        <Text as=\"p\" fontSize=\"12px\" lineHeight={1} color=\"textSubtle\">\n          {TranslateString(999, \"You won't be able to remove or change your position once you enter it.\")}\n        </Text>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default SetPositionCard\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { CardBody, PlayCircleOutlineIcon, Button } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useAppDispatch } from 'state'\nimport { BetPosition, Round } from 'state/types'\nimport { useGetTotalIntervalBlocks } from 'state/hooks'\nimport { markPositionAsEntered } from 'state/predictions'\nimport useToast from 'hooks/useToast'\nimport CardFlip from '../CardFlip'\nimport { getBnbAmount } from '../../helpers'\nimport { RoundResultBox, PrizePoolRow } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport Card from './Card'\nimport CardHeader from './CardHeader'\nimport SetPositionCard from './SetPositionCard'\n\ninterface OpenRoundCardProps {\n  round: Round\n  betAmount?: number\n  hasEnteredUp: boolean\n  hasEnteredDown: boolean\n  bullMultiplier: number\n  bearMultiplier: number\n}\n\ninterface State {\n  isSettingPosition: boolean\n  position: BetPosition\n}\n\nconst OpenRoundCard: React.FC<OpenRoundCardProps> = ({\n  round,\n  betAmount,\n  hasEnteredUp,\n  hasEnteredDown,\n  bullMultiplier,\n  bearMultiplier,\n}) => {\n  const canEnterPosition = round.lockPrice === null && !hasEnteredUp && !hasEnteredDown\n  const [state, setState] = useState<State>({\n    isSettingPosition: false,\n    position: BetPosition.BULL,\n  })\n  const TranslateString = useI18n()\n  const interval = useGetTotalIntervalBlocks()\n  const { toastSuccess } = useToast()\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const { isSettingPosition, position } = state\n\n  // Bettable rounds do not have an endblock set so we approximate it by adding the block interval\n  // to the start block\n  const endBlock = round.startBlock + interval\n\n  const handleBack = () =>\n    setState((prevState) => ({\n      ...prevState,\n      isSettingPosition: false,\n    }))\n\n  const handleSetPosition = (newPosition: BetPosition) => {\n    setState((prevState) => ({\n      ...prevState,\n      isSettingPosition: true,\n      position: newPosition,\n    }))\n  }\n\n  const togglePosition = () => {\n    setState((prevState) => ({\n      ...prevState,\n      position: prevState.position === BetPosition.BULL ? BetPosition.BEAR : BetPosition.BULL,\n    }))\n  }\n\n  const handleSuccess = async (decimalValue: BigNumber, hash: string) => {\n    const positionDisplay = position === BetPosition.BULL ? 'UP' : 'DOWN'\n\n    // Optimistically set the user bet so we see the entered position immediately.\n    dispatch(\n      markPositionAsEntered({\n        account,\n        roundId: round.id,\n        partialBet: {\n          hash,\n          position,\n          amount: getBnbAmount(decimalValue).toNumber(),\n        },\n      }),\n    )\n\n    handleBack()\n\n    toastSuccess(\n      'Success!',\n      TranslateString(999, `${positionDisplay} position entered`, {\n        position: positionDisplay,\n      }),\n    )\n  }\n\n  return (\n    <CardFlip isFlipped={isSettingPosition} height=\"404px\">\n      <Card>\n        <CardHeader\n          status=\"next\"\n          epoch={round.epoch}\n          blockNumber={endBlock}\n          icon={<PlayCircleOutlineIcon color=\"white\" mr=\"4px\" width=\"21px\" />}\n          title={TranslateString(999, 'Next')}\n        />\n        <CardBody p=\"16px\">\n          <MultiplierArrow amount={betAmount} multiplier={bullMultiplier} hasEntered={hasEnteredUp} />\n          <RoundResultBox isNext={canEnterPosition} isLive={!canEnterPosition}>\n            {canEnterPosition ? (\n              <>\n                <PrizePoolRow totalAmount={round.totalAmount} mb=\"8px\" />\n                <Button\n                  variant=\"success\"\n                  width=\"100%\"\n                  onClick={() => handleSetPosition(BetPosition.BULL)}\n                  mb=\"4px\"\n                  disabled={!canEnterPosition}\n                >\n                  {TranslateString(999, 'Enter UP')}\n                </Button>\n                <Button\n                  variant=\"danger\"\n                  width=\"100%\"\n                  onClick={() => handleSetPosition(BetPosition.BEAR)}\n                  disabled={!canEnterPosition}\n                >\n                  {TranslateString(999, 'Enter DOWN')}\n                </Button>\n              </>\n            ) : (\n              <>\n                <Button disabled startIcon={<PlayCircleOutlineIcon color=\"currentColor\" />} width=\"100%\" mb=\"8px\">\n                  {TranslateString(999, 'Position Entered')}\n                </Button>\n                <PrizePoolRow totalAmount={round.totalAmount} />\n              </>\n            )}\n          </RoundResultBox>\n          <MultiplierArrow\n            amount={betAmount}\n            multiplier={bearMultiplier}\n            betPosition={BetPosition.BEAR}\n            hasEntered={hasEnteredDown}\n          />\n        </CardBody>\n      </Card>\n      <SetPositionCard\n        onBack={handleBack}\n        onSuccess={handleSuccess}\n        position={position}\n        togglePosition={togglePosition}\n      />\n    </CardFlip>\n  )\n}\n\nexport default OpenRoundCard\n","import { useEffect, useRef, useState } from 'react'\nimport { BSC_BLOCK_TIME } from 'config'\nimport { getWeb3NoAccount } from 'utils/web3'\n\n/**\n * Returns a countdown in seconds of a given block\n */\nconst useBlockCountdown = (blockNumber: number) => {\n  const timer = useRef<ReturnType<typeof setTimeout>>(null)\n  const [secondsRemaining, setSecondsRemaining] = useState(0)\n\n  useEffect(() => {\n    const startCountdown = async () => {\n      const web3 = getWeb3NoAccount()\n      const currentBlock = await web3.eth.getBlockNumber()\n\n      if (blockNumber > currentBlock) {\n        setSecondsRemaining((blockNumber - currentBlock) * BSC_BLOCK_TIME)\n\n        // Clear previous interval\n        if (timer.current) {\n          clearInterval(timer.current)\n        }\n\n        timer.current = setInterval(() => {\n          setSecondsRemaining((prevSecondsRemaining) => {\n            if (prevSecondsRemaining === 1) {\n              clearInterval(timer.current)\n            }\n\n            return prevSecondsRemaining - 1\n          })\n        }, 1000)\n      }\n    }\n\n    startCountdown()\n\n    return () => {\n      clearInterval(timer.current)\n    }\n  }, [setSecondsRemaining, blockNumber, timer])\n\n  return secondsRemaining\n}\n\nexport default useBlockCountdown\n","import { useGetCurrentRoundBlockNumber, useGetIntervalBlocks } from 'state/hooks'\nimport useBlockCountdown from 'hooks/useGetBlockCountdown'\n\n/**\n * Returns a countdown in seconds of a given block\n */\nconst useRoundCountdown = (intervalsToAdd = 1) => {\n  const interval = useGetIntervalBlocks()\n  const currentRoundBlockNum = useGetCurrentRoundBlockNumber()\n  const blocksToAdd = intervalsToAdd * interval\n  const seconds = useBlockCountdown(currentRoundBlockNum + blocksToAdd)\n\n  return seconds\n}\n\nexport default useRoundCountdown\n","import React from 'react'\nimport { CardBody, Text, WaitIcon } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { Round, BetPosition } from 'state/types'\nimport { useGetCurrentEpoch, useGetTotalIntervalBlocks } from 'state/hooks'\nimport { formatRoundTime } from '../../helpers'\nimport useRoundCountdown from '../../hooks/useRoundCountdown'\nimport { RoundResultBox } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport Card from './Card'\nimport CardHeader from './CardHeader'\n\ninterface SoonRoundCardProps {\n  round: Round\n}\n\nconst SoonRoundCard: React.FC<SoonRoundCardProps> = ({ round }) => {\n  const TranslateString = useI18n()\n  const interval = useGetTotalIntervalBlocks()\n  const currentEpoch = useGetCurrentEpoch()\n  const estimatedEndBlock = round.startBlock + interval\n  const seconds = useRoundCountdown(round.epoch - currentEpoch + 1)\n  const countdown = formatRoundTime(seconds)\n\n  return (\n    <Card>\n      <CardHeader\n        status=\"soon\"\n        icon={<WaitIcon mr=\"4px\" width=\"21px\" />}\n        title={TranslateString(999, 'Later')}\n        epoch={round.epoch}\n        blockNumber={estimatedEndBlock}\n      />\n      <CardBody p=\"16px\">\n        <MultiplierArrow isDisabled />\n        <RoundResultBox>\n          <Text textAlign=\"center\">\n            <Text bold>{TranslateString(999, 'Entry starts')}</Text>\n            <Text fontSize=\"24px\" bold>\n              {`~${countdown}`}\n            </Text>\n          </Text>\n        </RoundResultBox>\n        <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default SoonRoundCard\n","import React, { useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useGetBetByRoundId, useGetCurrentEpoch } from 'state/hooks'\nimport { BetPosition, Round } from 'state/types'\nimport { fetchRoundBet } from 'state/predictions'\nimport { useAppDispatch } from 'state'\nimport { getMultiplier } from '../../helpers'\nimport ExpiredRoundCard from './ExpiredRoundCard'\nimport LiveRoundCard from './LiveRoundCard'\nimport OpenRoundCard from './OpenRoundCard'\nimport SoonRoundCard from './SoonRoundCard'\n\ninterface RoundCardProps {\n  round: Round\n}\n\nconst RoundCard: React.FC<RoundCardProps> = ({ round }) => {\n  const { id, epoch, lockPrice, closePrice, totalAmount, bullAmount, bearAmount } = round\n  const currentEpoch = useGetCurrentEpoch()\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const bet = useGetBetByRoundId(account, id)\n  const hasEntered = bet !== null\n  const hasEnteredUp = hasEntered && bet.position === BetPosition.BULL\n  const hasEnteredDown = hasEntered && bet.position === BetPosition.BEAR\n  const bullMultiplier = getMultiplier(totalAmount, bullAmount)\n  const bearMultiplier = getMultiplier(totalAmount, bearAmount)\n\n  // Perform a one-time check to see if the user has placed a bet\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchRoundBet({ account, roundId: id }))\n    }\n  }, [account, id, dispatch])\n\n  // Next (open) round\n  if (epoch === currentEpoch && lockPrice === null) {\n    return (\n      <OpenRoundCard\n        round={round}\n        hasEnteredDown={hasEnteredDown}\n        hasEnteredUp={hasEnteredUp}\n        betAmount={bet?.amount}\n        bullMultiplier={bullMultiplier}\n        bearMultiplier={bearMultiplier}\n      />\n    )\n  }\n\n  // Live round\n  if (closePrice === null && epoch === currentEpoch - 1) {\n    return (\n      <LiveRoundCard\n        betAmount={bet?.amount}\n        hasEnteredDown={hasEnteredDown}\n        hasEnteredUp={hasEnteredUp}\n        round={round}\n        bullMultiplier={bullMultiplier}\n        bearMultiplier={bearMultiplier}\n      />\n    )\n  }\n\n  // Fake future rounds\n  if (epoch > currentEpoch) {\n    return <SoonRoundCard round={round} />\n  }\n\n  // Past rounds\n  return (\n    <ExpiredRoundCard\n      round={round}\n      hasEnteredDown={hasEnteredDown}\n      hasEnteredUp={hasEnteredUp}\n      betAmount={bet?.amount}\n      bullMultiplier={bullMultiplier}\n      bearMultiplier={bearMultiplier}\n    />\n  )\n}\n\nexport default RoundCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { BnbUsdtPairTokenIcon, Box, Card, PocketWatchIcon, Text } from '@pancakeswap-libs/uikit'\nimport { useBnbUsdtTicker } from 'hooks/ticker'\nimport useI18n from 'hooks/useI18n'\nimport { formatRoundTime } from '../helpers'\nimport useRoundCountdown from '../hooks/useRoundCountdown'\n\nconst Token = styled(Box)`\n  margin-top: -24px;\n  position: absolute;\n  top: 50%;\n  z-index: 30;\n\n  & > svg {\n    height: 48px;\n    width: 48px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin-top: -32px;\n\n    & > svg {\n      height: 64px;\n      width: 64px;\n    }\n  }\n`\n\nconst Title = styled(Text)`\n  font-size: 16px;\n  line-height: 21px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    font-size: 20px;\n    line-height: 22px;\n  }\n`\n\nconst Price = styled(Text)`\n  height: 18px;\n  justify-self: start;\n  width: 60px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: center;\n  }\n`\n\nconst Interval = styled(Text)`\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: center;\n    width: 32px;\n  }\n`\n\nconst Label = styled(Card)<{ dir: 'left' | 'right' }>`\n  align-items: ${({ dir }) => (dir === 'right' ? 'flex-end' : 'flex-start')};\n  border-radius: ${({ dir }) => (dir === 'right' ? '8px 8px 8px 24px' : '8px 8px 24px 8px')};\n  display: flex;\n  flex-direction: column;\n  overflow: initial;\n  padding: ${({ dir }) => (dir === 'right' ? '0 28px 0 8px' : '0 8px 0 24px')};\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    align-items: center;\n    border-radius: 16px;\n    flex-direction: row;\n    padding: ${({ dir }) => (dir === 'right' ? '8px 40px 8px 8px' : '8px 8px 8px 40px')};\n  }\n`\n\nexport const PricePairLabel: React.FC = () => {\n  const { stream } = useBnbUsdtTicker()\n  const { lastPrice } = stream ?? {}\n\n  return (\n    <Box pl=\"24px\" position=\"relative\" display=\"inline-block\">\n      <Token left={0}>\n        <BnbUsdtPairTokenIcon />\n      </Token>\n      <Label dir=\"left\">\n        <Title bold textTransform=\"uppercase\">\n          BNBUSDT\n        </Title>\n        <Price fontSize=\"12px\">\n          {lastPrice &&\n            `$${lastPrice.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`}\n        </Price>\n      </Label>\n    </Box>\n  )\n}\n\ninterface TimerLabelProps {\n  interval: string\n}\n\nexport const TimerLabel: React.FC<TimerLabelProps> = ({ interval }) => {\n  const seconds = useRoundCountdown()\n  const countdown = formatRoundTime(seconds)\n  const TranslateString = useI18n()\n\n  return (\n    <Box pr=\"24px\" position=\"relative\">\n      <Label dir=\"right\">\n        <Title bold color=\"secondary\">\n          {seconds === 0 ? TranslateString(999, 'Closing') : countdown}\n        </Title>\n        <Interval fontSize=\"12px\">{interval}</Interval>\n      </Label>\n      <Token right={0}>\n        <PocketWatchIcon />\n      </Token>\n    </Box>\n  )\n}\n","import React from 'react'\nimport { ArrowBackIcon, ArrowForwardIcon, BunnyCardsIcon, Card, IconButton } from '@pancakeswap-libs/uikit'\nimport styled from 'styled-components'\nimport { useGetCurrentEpoch, useGetSortedRounds } from 'state/hooks'\nimport useSwiper from '../hooks/useSwiper'\n\nconst StyledPrevNextNav = styled(Card)`\n  align-items: center;\n  display: none;\n  justify-content: space-between;\n  overflow: initial;\n  position: relative;\n  width: 128px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: flex;\n  }\n`\n\nconst Icon = styled.div`\n  cursor: pointer;\n  left: 50%;\n  margin-left: -32px;\n  position: absolute;\n`\n\nconst PrevNextNav = () => {\n  const { swiper } = useSwiper()\n  const currentEpoch = useGetCurrentEpoch()\n  const rounds = useGetSortedRounds()\n\n  const handlePrevSlide = () => {\n    swiper.slidePrev()\n  }\n\n  const handleNextSlide = () => {\n    swiper.slideNext()\n  }\n\n  const handleSlideToLive = () => {\n    const currentEpochIndex = rounds.findIndex((round) => round.epoch === currentEpoch)\n\n    swiper.slideTo(currentEpochIndex - 1)\n    swiper.update()\n  }\n\n  return (\n    <StyledPrevNextNav>\n      <IconButton variant=\"text\" scale=\"sm\" onClick={handlePrevSlide}>\n        <ArrowBackIcon color=\"primary\" width=\"24px\" />\n      </IconButton>\n      <Icon onClick={handleSlideToLive}>\n        <BunnyCardsIcon width=\"64px\" />\n      </Icon>\n      <IconButton variant=\"text\" scale=\"sm\" onClick={handleNextSlide}>\n        <ArrowForwardIcon color=\"primary\" width=\"24px\" />\n      </IconButton>\n    </StyledPrevNextNav>\n  )\n}\n\nexport default PrevNextNav\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { AutoRenewIcon, HistoryIcon, IconButton } from '@pancakeswap-libs/uikit'\nimport { useAppDispatch } from 'state'\nimport { setHistoryPaneState } from 'state/predictions'\nimport { useGetIsFetchingHistory } from 'state/hooks'\n\nconst HistoryButton = () => {\n  const isFetchingHistory = useGetIsFetchingHistory()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const handleClick = () => {\n    dispatch(setHistoryPaneState(true))\n  }\n\n  return (\n    <IconButton variant=\"subtle\" ml=\"8px\" onClick={handleClick} isLoading={isFetchingHistory} disabled={!account}>\n      {isFetchingHistory ? <AutoRenewIcon spin color=\"white\" /> : <HistoryIcon width=\"24px\" color=\"white\" />}\n    </IconButton>\n  )\n}\n\nexport default HistoryButton\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, HelpIcon, IconButton } from '@pancakeswap-libs/uikit'\nimport FlexRow from './FlexRow'\nimport { PricePairLabel, TimerLabel } from './Label'\nimport PrevNextNav from './PrevNextNav'\nimport HistoryButton from './HistoryButton'\n\nconst SetCol = styled.div`\n  flex: none;\n  width: auto;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    width: 270px;\n  }\n`\n\nconst HelpButtonWrapper = styled.div`\n  order: 1;\n  margin: 0 8px 0 0;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    order: 2;\n    margin: 0 0 0 8px;\n  }\n`\n\nconst TimerLabelWrapper = styled.div`\n  order: 2;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    order: 1;\n  }\n`\n\nconst HistoryButtonWrapper = styled.div`\n  display: none;\n  order: 3;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: initial;\n  }\n`\n\nconst Menu = () => {\n  return (\n    <FlexRow alignItems=\"center\" p=\"16px\">\n      <SetCol>\n        <PricePairLabel />\n      </SetCol>\n      <FlexRow justifyContent=\"center\">\n        <PrevNextNav />\n      </FlexRow>\n      <SetCol>\n        <Flex alignItems=\"center\" justifyContent=\"flex-end\">\n          <TimerLabelWrapper>\n            <TimerLabel interval=\"5m\" />\n          </TimerLabelWrapper>\n          <HelpButtonWrapper>\n            <IconButton\n              variant=\"subtle\"\n              as=\"a\"\n              href=\"https://docs.pancakeswap.finance/products/prediction\"\n              target=\"_blank\"\n              rel=\"noreferrer noopener\"\n            >\n              <HelpIcon width=\"24px\" color=\"white\" />\n            </IconButton>\n          </HelpButtonWrapper>\n          <HistoryButtonWrapper>\n            <HistoryButton />\n          </HistoryButtonWrapper>\n        </Flex>\n      </SetCol>\n    </FlexRow>\n  )\n}\n\nexport default Menu\n","import usePreviousValue from 'hooks/usePreviousValue'\nimport { useEffect } from 'react'\nimport { useAppDispatch } from 'state'\nimport { useGetCurrentEpoch, useGetSortedRounds } from 'state/hooks'\nimport useSwiper from './useSwiper'\n\nconst useOnNextRound = () => {\n  const currentEpoch = useGetCurrentEpoch()\n  const rounds = useGetSortedRounds()\n  const previousEpoch = usePreviousValue(currentEpoch)\n  const { swiper } = useSwiper()\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    if (swiper && currentEpoch !== undefined && previousEpoch !== undefined && currentEpoch !== previousEpoch) {\n      const currentEpochIndex = rounds.findIndex((round) => round.epoch === currentEpoch)\n\n      // Slide to the current LIVE round which is always the one before the current round\n      swiper.slideTo(currentEpochIndex - 1)\n      swiper.update()\n    }\n  }, [previousEpoch, currentEpoch, rounds, swiper, dispatch])\n}\n\nexport default useOnNextRound\n","import React from 'react'\nimport styled from 'styled-components'\nimport SwiperCore, { Keyboard, Mousewheel } from 'swiper'\nimport { Swiper, SwiperSlide } from 'swiper/react'\nimport { Box } from '@pancakeswap-libs/uikit'\nimport { useGetSortedRounds } from 'state/hooks'\nimport 'swiper/swiper.min.css'\nimport RoundCard from './components/RoundCard'\nimport Menu from './components/Menu'\nimport useSwiper from './hooks/useSwiper'\nimport useOnNextRound from './hooks/useOnNextRound'\n\nSwiperCore.use([Keyboard, Mousewheel])\n\nconst StyledSwiper = styled.div`\n  .swiper-wrapper {\n    align-items: center;\n    display: flex;\n  }\n\n  .swiper-slide {\n    width: 320px;\n  }\n`\nconst Positions: React.FC = () => {\n  const { setSwiper } = useSwiper()\n  const rounds = useGetSortedRounds()\n  const initialIndex = Math.floor(rounds.length / 2)\n\n  useOnNextRound()\n\n  return (\n    <Box overflowX=\"hidden\" overflowY=\"auto\">\n      <Menu />\n      <StyledSwiper>\n        <Swiper\n          initialSlide={initialIndex}\n          onSwiper={setSwiper}\n          spaceBetween={16}\n          slidesPerView=\"auto\"\n          freeMode\n          freeModeSticky\n          centeredSlides\n          mousewheel\n          keyboard\n          resizeObserver\n        >\n          {rounds.map((round) => (\n            <SwiperSlide key={round.id}>\n              <RoundCard round={round} />\n            </SwiperSlide>\n          ))}\n        </Swiper>\n      </StyledSwiper>\n    </Box>\n  )\n}\n\nexport default Positions\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box, Flex } from '@pancakeswap-libs/uikit'\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/hooks'\nimport { PredictionStatus } from 'state/types'\nimport MobileMenu from './components/MobileMenu'\nimport History from './History'\nimport Positions from './Positions'\nimport Chart from './Chart'\nimport { ErrorNotification, PauseNotification } from './components/Notification'\n\nenum PageView {\n  POSITIONS = 'positions',\n  HISTORY = 'history',\n  CHART = 'chart',\n}\n\nconst StyledMobile = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  max-height: 100%;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: none;\n  }\n`\n\nconst View = styled.div<{ isVisible: boolean }>`\n  height: 100%;\n  left: 0;\n  position: absolute;\n  top: 0;\n  width: 100%;\n  visibility: ${({ isVisible }) => (isVisible ? 'visible' : 'hidden')};\n`\n\nconst getView = (isHistoryPaneOpen: boolean, isChartPaneOpen: boolean): PageView => {\n  if (isHistoryPaneOpen) {\n    return PageView.HISTORY\n  }\n\n  if (isChartPaneOpen) {\n    return PageView.CHART\n  }\n\n  return PageView.POSITIONS\n}\n\nconst Mobile: React.FC = () => {\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\n  const isChartPaneOpen = useIsChartPaneOpen()\n  const view = getView(isHistoryPaneOpen, isChartPaneOpen)\n  const status = useGetPredictionsStatus()\n\n  return (\n    <StyledMobile>\n      <Box height=\"100%\" overflow=\"hidden\" position=\"relative\">\n        <View isVisible={view === PageView.POSITIONS}>\n          <Flex alignItems=\"center\" height=\"100%\">\n            {status === PredictionStatus.ERROR && <ErrorNotification />}\n            {status === PredictionStatus.PAUSED && <PauseNotification />}\n            {status === PredictionStatus.LIVE && <Positions />}\n          </Flex>\n        </View>\n        <View isVisible={view === PageView.CHART}>\n          <Chart />\n        </View>\n        <View isVisible={view === PageView.HISTORY}>\n          <History />\n        </View>\n      </Box>\n      <MobileMenu />\n    </StyledMobile>\n  )\n}\n\nexport default Mobile\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useAppDispatch } from 'state'\nimport { ArrowDownIcon, Button, ChartIcon } from '@pancakeswap-libs/uikit'\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/hooks'\nimport { setChartPaneState } from 'state/predictions'\nimport { PredictionStatus } from 'state/types'\nimport useI18n from 'hooks/useI18n'\nimport TradingView from './components/TradingView'\nimport { ErrorNotification, PauseNotification } from './components/Notification'\nimport History from './History'\nimport Positions from './Positions'\n\nconst PositionsPane = styled.div`\n  align-items: center;\n  display: flex;\n  flex: 1;\n  min-height: 506px;\n`\n\nconst HistoryPane = styled.div<{ isHistoryPaneOpen: boolean }>`\n  flex: none;\n  overflow: hidden;\n  transition: width 200ms ease-in-out;\n  width: ${({ isHistoryPaneOpen }) => (isHistoryPaneOpen ? '384px' : 0)};\n`\n\nconst ChartPane = styled.div<{ isChartPaneOpen: boolean }>`\n  height: ${({ isChartPaneOpen }) => (isChartPaneOpen ? '100%' : 0)};\n  position: relative;\n`\n\nconst ExpandChartButton = styled(Button)`\n  background-color: ${({ theme }) => theme.card.background};\n  border-bottom-left-radius: 0;\n  border-bottom-right-radius: 0;\n  color: ${({ theme }) => theme.colors.text};\n  display: none;\n  left: 32px;\n  position: absolute;\n  top: -32px;\n  z-index: 50;\n\n  &:hover:not(:disabled):not(.pancake-button--disabled):not(.pancake-button--disabled):not(:active) {\n    background-color: ${({ theme }) => theme.card.background};\n    opacity: 1;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: inline-flex;\n  }\n`\n\nconst ContentWrapper = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  height: 100%;\n  overflow-x: hidden;\n  overflow-y: auto;\n  position: relative;\n`\n\nconst StyledDesktop = styled.div`\n  display: none;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: flex;\n    height: 100%;\n  }\n`\n\nconst Desktop: React.FC = () => {\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\n  const isChartPaneOpen = useIsChartPaneOpen()\n  const dispatch = useAppDispatch()\n  const TranslateString = useI18n()\n  const status = useGetPredictionsStatus()\n\n  const toggleChartPane = () => {\n    dispatch(setChartPaneState(!isChartPaneOpen))\n  }\n\n  return (\n    <StyledDesktop>\n      <ContentWrapper>\n        {status === PredictionStatus.ERROR && <ErrorNotification />}\n        {status === PredictionStatus.PAUSED && <PauseNotification />}\n        {status === PredictionStatus.LIVE && (\n          <>\n            <PositionsPane>\n              <Positions />\n            </PositionsPane>\n            <ChartPane isChartPaneOpen={isChartPaneOpen}>\n              <ExpandChartButton\n                variant=\"tertiary\"\n                scale=\"sm\"\n                startIcon={isChartPaneOpen ? <ArrowDownIcon /> : <ChartIcon />}\n                onClick={toggleChartPane}\n              >\n                {isChartPaneOpen ? TranslateString(438, 'Close') : TranslateString(999, 'Charts')}\n              </ExpandChartButton>\n              <TradingView />\n            </ChartPane>\n          </>\n        )}\n      </ContentWrapper>\n      <HistoryPane isHistoryPaneOpen={isHistoryPaneOpen}>\n        <History />\n      </HistoryPane>\n    </StyledDesktop>\n  )\n}\n\nexport default Desktop\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport {\n  ArrowBackIcon,\n  ArrowForwardIcon,\n  ButtonMenu,\n  ButtonMenuItem,\n  Cards,\n  ChartIcon,\n  HistoryIcon,\n  IconButton,\n} from '@pancakeswap-libs/uikit'\nimport { useAppDispatch } from 'state'\nimport { PredictionStatus } from 'state/types'\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/hooks'\nimport { setChartPaneState, setHistoryPaneState } from 'state/predictions'\nimport useSwiper from '../hooks/useSwiper'\n\nconst ButtonNav = styled.div`\n  flex: none;\n`\n\nconst TabNav = styled.div`\n  flex: 1;\n  text-align: center;\n`\n\nconst StyledMobileMenu = styled.div`\n  align-items: center;\n  background-color: ${({ theme }) => theme.card.background};\n  display: flex;\n  flex: none;\n  height: 64px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: none;\n  }\n`\n\nconst getActiveIndex = (isHistoryOpen: boolean, isChartOpen: boolean) => {\n  if (isHistoryOpen) {\n    return 2\n  }\n\n  if (isChartOpen) {\n    return 1\n  }\n\n  return 0\n}\n\nconst MobileMenu = () => {\n  const { swiper } = useSwiper()\n  const isHistoryOpen = useIsHistoryPaneOpen()\n  const isChartOpen = useIsChartPaneOpen()\n  const status = useGetPredictionsStatus()\n  const activeIndex = getActiveIndex(isHistoryOpen, isChartOpen)\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const handleItemClick = (index: number) => {\n    switch (index) {\n      case 2:\n        dispatch(setHistoryPaneState(true))\n        break\n      case 1:\n        dispatch(setChartPaneState(true))\n        dispatch(setHistoryPaneState(false))\n        break\n      case 0:\n      default:\n        dispatch(setHistoryPaneState(false))\n        dispatch(setChartPaneState(false))\n    }\n  }\n\n  return (\n    <StyledMobileMenu>\n      <ButtonNav>\n        <IconButton variant=\"text\" onClick={() => swiper.slidePrev()} disabled={status !== PredictionStatus.LIVE}>\n          <ArrowBackIcon width=\"24px\" color=\"primary\" />\n        </IconButton>\n      </ButtonNav>\n      <TabNav>\n        <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\" onItemClick={handleItemClick}>\n          <ButtonMenuItem>\n            <Cards color=\"currentColor\" />\n          </ButtonMenuItem>\n          <ButtonMenuItem>\n            <ChartIcon color=\"currentColor\" />\n          </ButtonMenuItem>\n          <ButtonMenuItem disabled={!account}>\n            <HistoryIcon color=\"currentColor\" />\n          </ButtonMenuItem>\n        </ButtonMenu>\n      </TabNav>\n      <ButtonNav>\n        <IconButton variant=\"text\" onClick={() => swiper.slideNext()} disabled={status !== PredictionStatus.LIVE}>\n          <ArrowForwardIcon width=\"24px\" color=\"primary\" />\n        </IconButton>\n      </ButtonNav>\n    </StyledMobileMenu>\n  )\n}\n\nexport default MobileMenu\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex } from '@pancakeswap-libs/uikit'\nimport Menu from './components/Menu'\nimport TradingView from './components/TradingView'\n\nconst MenuWrapper = styled.div`\n  flex: none;\n`\n\nconst ChartWrapper = styled.div`\n  flex: 1;\n  height: 100%;\n`\n\nconst Chart = () => {\n  return (\n    <Flex flexDirection=\"column\" height=\"100%\">\n      <MenuWrapper>\n        <Menu />\n      </MenuWrapper>\n      <ChartWrapper>\n        <TradingView />\n      </ChartWrapper>\n    </Flex>\n  )\n}\n\nexport default Chart\n","import React, { useState } from 'react'\nimport {\n  ModalContainer,\n  ModalBody,\n  Text,\n  Button,\n  Flex,\n  InjectedModalProps,\n  Checkbox,\n  ModalHeader,\n  ModalTitle,\n  Heading,\n  Box,\n} from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport styled from 'styled-components'\n\ninterface RiskDisclaimerProps extends InjectedModalProps {\n  onSuccess: () => void\n}\n\nconst GradientModalHeader = styled(ModalHeader)`\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\n  padding-bottom: 24px;\n  padding-top: 24px;\n`\n\nconst RiskDisclaimer: React.FC<RiskDisclaimerProps> = ({ onSuccess, onDismiss }) => {\n  const [acknowledgeRisk, setAcknowledgeRisk] = useState(false)\n  const [acknowledgeBeta, setAcknowledgeBeta] = useState(false)\n  const TranslateString = useI18n()\n\n  const handleSetAcknowledgeRisk = () => {\n    setAcknowledgeRisk(!acknowledgeRisk)\n  }\n\n  const handleSetAcknowledgeBeta = () => {\n    setAcknowledgeBeta(!acknowledgeBeta)\n  }\n\n  const handleConfirm = () => {\n    onSuccess()\n    onDismiss()\n  }\n\n  return (\n    <ModalContainer title={TranslateString(999, 'Welcome!')} minWidth=\"320px\">\n      <GradientModalHeader>\n        <ModalTitle>\n          <Heading size=\"lg\">{TranslateString(556, 'Welcome!')}</Heading>\n        </ModalTitle>\n      </GradientModalHeader>\n      <ModalBody p=\"24px\" maxWidth=\"400px\">\n        <Box maxHeight=\"300px\" overflowY=\"auto\">\n          <Heading as=\"h3\" mb=\"24px\">\n            {TranslateString(999, 'This Product is in beta.')}\n          </Heading>\n\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n            {TranslateString(999, 'Once you enter a position, you cannot cancel or adjust it.')}\n          </Text>\n\n          <label htmlFor=\"checkbox\" style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}>\n            <Flex alignItems=\"center\">\n              <div style={{ flex: 'none' }}>\n                <Checkbox id=\"checkbox\" scale=\"sm\" checked={acknowledgeRisk} onChange={handleSetAcknowledgeRisk} />\n              </div>\n              <Text ml=\"8px\">\n                {TranslateString(\n                  999,\n                  'I understand that I am using this product at my own risk. Any losses incurred due to my actions are my own responsibility.',\n                )}\n              </Text>\n            </Flex>\n          </label>\n          <label htmlFor=\"checkbox1\" style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}>\n            <Flex alignItems=\"center\">\n              <div style={{ flex: 'none' }}>\n                <Checkbox id=\"checkbox1\" scale=\"sm\" checked={acknowledgeBeta} onChange={handleSetAcknowledgeBeta} />\n              </div>\n              <Text ml=\"8px\">\n                {TranslateString(\n                  999,\n                  'I understand that this product is still in beta. I am participating at my own risk',\n                )}\n              </Text>\n            </Flex>\n          </label>\n        </Box>\n        <Button width=\"100%\" onClick={handleConfirm} disabled={!acknowledgeRisk || !acknowledgeBeta}>\n          {TranslateString(999, 'Continue')}\n        </Button>\n      </ModalBody>\n    </ModalContainer>\n  )\n}\n\nexport default RiskDisclaimer\n","import React, { useEffect, useRef } from 'react'\nimport { Helmet } from 'react-helmet-async'\nimport { useMatchBreakpoints, useModal } from '@pancakeswap-libs/uikit'\nimport { useAppDispatch } from 'state'\nimport { useGetPredictionsStatus, useInitialBlock } from 'state/hooks'\nimport {\n  getMarketData,\n  getStaticPredictionsData,\n  makeFutureRoundResponse,\n  makeRoundData,\n  transformRoundResponse,\n} from 'state/predictions/helpers'\nimport { initialize, setPredictionStatus } from 'state/predictions'\nimport { HistoryFilter, PredictionsState, PredictionStatus } from 'state/types'\nimport usePersistState from 'hooks/usePersistState'\nimport PageLoader from 'components/PageLoader'\nimport usePollRoundData from './hooks/usePollRoundData'\nimport Container from './components/Container'\nimport CollectWinningsPopup from './components/CollectWinningsPopup'\nimport SwiperProvider from './context/SwiperProvider'\nimport Desktop from './Desktop'\nimport Mobile from './Mobile'\nimport RiskDisclaimer from './components/RiskDisclaimer'\n\nconst FUTURE_ROUND_COUNT = 2 // the number of rounds in the future to show\n\nconst Predictions = () => {\n  const { isLg, isXl } = useMatchBreakpoints()\n  const [hasAcceptedRisk, setHasAcceptedRisk] = usePersistState(false, 'pancake_predictions_accepted_risk')\n  const status = useGetPredictionsStatus()\n  const dispatch = useAppDispatch()\n  const initialBlock = useInitialBlock()\n  const isDesktop = isLg || isXl\n  const handleAcceptRiskSuccess = () => setHasAcceptedRisk(true)\n  const [onPresentRiskDisclaimer] = useModal(<RiskDisclaimer onSuccess={handleAcceptRiskSuccess} />, false)\n\n  // TODO: memoize modal's handlers\n  const onPresentRiskDisclaimerRef = useRef(onPresentRiskDisclaimer)\n\n  useEffect(() => {\n    if (!hasAcceptedRisk) {\n      onPresentRiskDisclaimerRef.current()\n    }\n  }, [hasAcceptedRisk, onPresentRiskDisclaimerRef])\n\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      const [staticPredictionsData, marketData] = await Promise.all([getStaticPredictionsData(), getMarketData()])\n      const { currentEpoch, intervalBlocks, bufferBlocks } = staticPredictionsData\n      const latestRound = marketData.rounds.find((round) => round.epoch === currentEpoch)\n\n      if (marketData.market.paused) {\n        dispatch(setPredictionStatus(PredictionStatus.PAUSED))\n      } else if (latestRound && latestRound.epoch === currentEpoch) {\n        const currentRoundStartBlock = Number(latestRound.startBlock)\n        const futureRounds = []\n        const halfInterval = (intervalBlocks + bufferBlocks) / 2\n\n        for (let i = 1; i <= FUTURE_ROUND_COUNT; i++) {\n          futureRounds.push(makeFutureRoundResponse(currentEpoch + i, (currentRoundStartBlock + halfInterval) * i))\n        }\n\n        const roundData = makeRoundData([...marketData.rounds, ...futureRounds.map(transformRoundResponse)])\n\n        dispatch(\n          initialize({\n            ...(staticPredictionsData as Omit<PredictionsState, 'rounds'>),\n            historyFilter: HistoryFilter.ALL,\n            currentRoundStartBlockNumber: currentRoundStartBlock,\n            rounds: roundData,\n            history: {},\n            bets: {},\n          }),\n        )\n      } else {\n        // If the latest epoch from the API does not match the latest epoch from the contract we have an unrecoverable error\n        dispatch(setPredictionStatus(PredictionStatus.ERROR))\n      }\n    }\n\n    // Do not start initialization until the first block has been retrieved\n    if (initialBlock > 0) {\n      fetchInitialData()\n    }\n  }, [initialBlock, dispatch])\n\n  usePollRoundData()\n\n  if (status === PredictionStatus.INITIAL) {\n    return <PageLoader />\n  }\n\n  return (\n    <>\n      <Helmet>\n        <script src=\"https://s3.tradingview.com/tv.js\" type=\"text/javascript\" id=\"tradingViewWidget\" />\n      </Helmet>\n      <SwiperProvider>\n        <Container>\n          {isDesktop ? <Desktop /> : <Mobile />}\n          <CollectWinningsPopup />\n        </Container>\n      </SwiperProvider>\n    </>\n  )\n}\n\nexport default Predictions\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport useWeb3 from './useWeb3'\nimport useRefresh from './useRefresh'\nimport useLastUpdated from './useLastUpdated'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { account } = useWeb3React()\n  const web3 = useWeb3()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3)\n      const res = await contract.methods.balanceOf(account).call()\n      setBalance(new BigNumber(res))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, tokenAddress, web3, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getCakeContract()\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { slowRefresh } = useRefresh()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3)\n      const res = await contract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(res))\n    }\n\n    fetchBalance()\n  }, [web3, tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport const useGetBnbBalance = () => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { account } = useWeb3React()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const walletBalance = await web3.eth.getBalance(account)\n      setBalance(new BigNumber(walletBalance))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, web3, lastUpdated, setBalance])\n\n  return { balance, refresh: setLastUpdated }\n}\n\nexport default useTokenBalance\n","import { useState } from 'react'\nimport usePreviousValue from './usePreviousValue'\n\n/**\n * A helper hook to keep track of the time between events\n * Can also be used to force an effect to re-run\n */\nconst useLastUpdated = () => {\n  const [lastUpdated, setStateLastUpdated] = useState(Date.now())\n  const previousLastUpdated = usePreviousValue(lastUpdated)\n\n  const setLastUpdated = () => {\n    setStateLastUpdated(Date.now())\n  }\n\n  return { lastUpdated, previousLastUpdated, setLastUpdated }\n}\n\nexport default useLastUpdated\n","import { useEffect, useRef } from 'react'\n\n/**\n * Returns the previous value of the given value\n *\n * @see https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state\n */\nconst usePreviousValue = (value: any) => {\n  const ref = useRef()\n\n  useEffect(() => {\n    ref.current = value\n  })\n\n  return ref.current\n}\n\nexport default usePreviousValue\n","const MINUTE_IN_SECONDS = 60\nconst HOUR_IN_SECONDS = 3600\nconst DAY_IN_SECONDS = 86400\nconst MONTH_IN_SECONDS = 2629800\nconst YEAR_IN_SECONDS = 31557600\n\n/**\n * Format number of seconds into year, month, day, hour, minute, seconds\n *\n * @param seconds\n */\nconst getTimePeriods = (seconds: number) => {\n  let delta = Math.abs(seconds)\n  const timeLeft = {\n    years: 0,\n    months: 0,\n    days: 0,\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n  }\n\n  if (delta >= YEAR_IN_SECONDS) {\n    timeLeft.years = Math.floor(delta / YEAR_IN_SECONDS)\n    delta -= timeLeft.years * YEAR_IN_SECONDS\n  }\n\n  if (delta >= MONTH_IN_SECONDS) {\n    timeLeft.months = Math.floor(delta / MONTH_IN_SECONDS)\n    delta -= timeLeft.months * MONTH_IN_SECONDS\n  }\n\n  if (delta >= DAY_IN_SECONDS) {\n    timeLeft.days = Math.floor(delta / DAY_IN_SECONDS)\n    delta -= timeLeft.days * DAY_IN_SECONDS\n  }\n\n  if (delta >= HOUR_IN_SECONDS) {\n    timeLeft.hours = Math.floor(delta / HOUR_IN_SECONDS)\n    delta -= timeLeft.hours * HOUR_IN_SECONDS\n  }\n\n  if (delta >= MINUTE_IN_SECONDS) {\n    timeLeft.minutes = Math.floor(delta / MINUTE_IN_SECONDS)\n    delta -= timeLeft.minutes * MINUTE_IN_SECONDS\n  }\n\n  timeLeft.seconds = delta\n\n  return timeLeft\n}\n\nexport default getTimePeriods\n"],"sourceRoot":""}